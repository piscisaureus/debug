<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title><![CDATA[Adam Argyle]]></title>
        <description><![CDATA[RSS Feed for Adam Argyle: Web design & development tips & tricks: CSS, JS, HTML, Design, & UX.]]></description>
        <link>https://nerdy.dev</link>
        <image>
            <url>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</url>
            <title>Adam Argyle</title>
            <link>https://nerdy.dev</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 21 Sep 2023 04:26:34 GMT</lastBuildDate>
        <atom:link href="https://nerdy.dev/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[2023 Adam Argyle]]></copyright>
        <language><![CDATA[en]]></language>
        <webMaster><![CDATA[adam.is@nerdy.dev (Adam Argyle)]]></webMaster>
        <ttl>60</ttl>
        <category><![CDATA[CSS]]></category>
        <category><![CDATA[HTML]]></category>
        <category><![CDATA[JavaScript]]></category>
        <category><![CDATA[Front-End]]></category>
        <category><![CDATA[Design]]></category>
        <icon>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</icon>
        <logo>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/skull-card.png</logo>
        <item>
            <title><![CDATA[Oklch Stepped Palette With A Bit Of A Hue Rotate]]></title>
            <description><![CDATA[
          <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/hue-list.mp4" alt="undefined" height="964"  width="1714" />
        <p><a href="https://codepen.io/argyleink/pen/YzdEapM">View Source</a></p>
]]></description>
            <link>https://nerdy.dev/oklch-stepped-palette-with-a-bit-of-a-hue-rotate?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/oklch-stepped-palette-with-a-bit-of-a-hue-rotate?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Wed, 20 Sep 2023 03:56:20 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/hue-list.mp4" length="0" type="video/mp4"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/hue-list.mp4"/>
        </item>
        <item>
            <title><![CDATA[Relative Color Rocks]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-rcs.png" alt="rgb(from green r g b / alpha)" height="712"  width="1075" />
        <p>CSS <a href="https://web.dev/state-of-css-2022/#relative-color-syntax">relative color</a> syntax</p>
]]></description>
            <link>https://nerdy.dev/relative-color-rocks?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/relative-color-rocks?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Mon, 18 Sep 2023 03:54:56 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-rcs.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-rcs.png"/>
        </item>
        <item>
            <title><![CDATA[Chris Coyier Is Bad At Css Too]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/chris-bad-at-css.jpg" alt="Chris Coyier quoted with 'Im not really good at trickery.'" height="720"  width="1280" />
        <p><span class="Tag">NEW</span><br>üéôÔ∏è <strong>Bad At CSS Podcast</strong>  </p>
<p><a href="https://twitter.com/_davideast">David East</a> and I have a special guest:<br><a href="https://chriscoyier.net/">Chris Coyier</a> üéâ</p>
<p>Subscribe and listen<br>
<a href="https://open.spotify.com/show/5vtb28Q1QNzgv07v9LzpGp">Spotify</a> ¬∑ 
<a href="https://podcasts.apple.com/us/podcast/bad-at-css/id1702605487">Apple</a> ¬∑ 
<a href="https://www.youtube.com/watch?v=ZropSprSNfs">YouTube</a></p>
]]></description>
            <link>https://nerdy.dev/chris-coyier-is-bad-at-css-too?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/chris-coyier-is-bad-at-css-too?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[media]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 14 Sep 2023 16:22:36 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/chris-bad-at-css.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/chris-bad-at-css.jpg"/>
        </item>
        <item>
            <title><![CDATA[Type safe CSS design systems with @property]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/at-property-typed.png" alt="@property --hue { syntax: '<angle>'; initial-value: 5rad; inherits: true; }
@property --surface { syntax: '<color>'; initial-value: #333; inherits: true; }" height="936"  width="1744" />
        <p>CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types">types</a> are a worthy investment into <a href="https://www.baeldung.com/cs/type-safety-programming#concept-of-type-safety">type safety</a> in your front-end work. We&#39;re still awaiting <a href="https://caniuse.com/mdn-css_at-rules_property">cross browser interop</a>, but we&#39;ll get there üôÇ</p>
<p>In case you&#39;ve never seen one, here&#39;s a typed CSS variable with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@property"><code>@property</code></a>:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@property</span><span style="color: var(--shiki-color-text)"> --focal-size {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax: &#39;&lt;</span><span style="color: var(--shiki-token-string-expression)">length-percentage</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">initial-value</span><span style="color: var(--shiki-color-text)">: 100%;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits: false;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Used that one so I could <a href="https://codepen.io/argyleink/pen/rNwWwor">animate a gradient mask image</a>. Pretty sweet.</p>
<p>Here&#39;s a preview of what CSS type safety can do, and what I&#39;ll be explaining:</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,q_auto/argyleink/typed-adaptive-surfaces.mp4 
            width="1920" 
            height="1080"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/typed-adaptive-surfaces.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>

        <h2>
          CSS type safety basics
          <a name="css-type-safety-basics" href="#css-type-safety-basics">#</a>
        </h2>
       <p>When learning Rust or TypeScript, a great place is to start with the type primitives. In CSS, a few of those are:</p>
<style>
  .types-list {
    display: flex;
    flex-flow: row wrap;
    gap: var(--size-3);

    & > .Tag {
      font-family: var(--font-mono);
      font-size: var(--font-size-3);
      text-transform: unset;
    }
  }
</style>

<div class="types-list">
  <span class="Tag">&#60;angle&#62;</span>
  <span class="Tag">&#60;length&#62;</span>
  <span class="Tag">&#60;percentage&#62;</span>
  <span class="Tag">&#60;length-percentage&#62;</span>
  <span class="Tag">&#60;number&#62;</span>
  <span class="Tag">&#60;integer&#62;</span>
  <span class="Tag">&#60;color&#62;</span>
  <span class="Tag">&#60;string&#62;</span>
  <span class="Tag">&#60;time&#62;</span>
  <span class="Tag">&#60;dimension&#62;</span>
  <span class="Tag">&#60;ratio&#62;</span>
  <span class="Tag">&#60;flex&#62;</span>
  <span class="Tag">&#60;frequency&#62;</span>
  <span class="Tag">&#60;resolution&#62;</span>
  <span class="Tag">&#60;image&#62;</span>
  <span class="Tag">&#60;position&#62;</span>
  <span class="Tag">&#60;hue&#62;</span>
  <span class="Tag">&#60;url&#62;</span>
  <span class="Tag">&#60;custom-ident&#62;</span>
</div>

<q class="info">
  <div>More types <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types">on MDN</a> and a full list of grammars and types on <a href="https://drafts.csswg.org/indexes/#types">csswg.org/indexes/#types</a>.</div>
</q>

<p>Peep another typed prop definition:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@property</span><span style="color: var(--shiki-color-text)"> --hue {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax: &#39;&lt;angle</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">initial-value</span><span style="color: var(--shiki-color-text)">: .5turn;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits: false;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Use it just like you always would <code>var(--hue)</code> and it&#39;ll be <code>.5turn</code>. <strong>BUT</strong>, try and set it to a value that doesn&#39;t match its type? Fails, value will still be <code>.5turn</code>. The custom property will not allow itself to be assigned a value that doesn&#39;t match it&#39;s type, always reverting to the last known good value.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --hue</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">90</span><span style="color: var(--shiki-token-keyword)">deg</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">/* ‚úÖ */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --hue</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">#f00</span><span style="color: var(--shiki-color-text)">;  </span><span style="color: var(--shiki-token-comment)">/* ‚ùå */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(98</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> .01 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* background will always resolve üëçüèª */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* --hue resolves 90deg *.</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">}</span></span></code></pre>
</code></pre>
<p><strong>This is CSS type safety.</strong> It doesn&#39;t crash the page, lock a thread, and unfortunately also won&#39;t tell you in any console that there&#39;s been an attempt to set the <code>--hue</code> prop to a <code>&lt;color&gt;</code> and not an <code>&lt;angle&gt;</code>. But I think some better custom property tooling could help üòè.</p>

        <h2>
          Level 2
          <a name="level-2" href="#level-2">#</a>
        </h2>
       <p>So far I defined a custom property as an <code>&lt;angle&gt;</code> and used it as a background. No property nesting.</p>
<p>Go <strong>a level deeper</strong> by making a custom property include another custom property. Here <code>--_bg</code> is an <code>&lt;any&gt;</code> kinda (because it&#39;s an untyped custom property at this point), with a nested custom property <code>--hue</code>:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_bg</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(98</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> .01 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--_bg)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-constant)">media</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">prefers-color-scheme</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dark</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --_bg</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(15</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> .1 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>You can go many levels deep, <a href="https://twitter.com/argyleink/status/1421822270943731718?s=20">but not too deep</a>. AND, you can type some or all of your variables. Next, we&#39;ll make some type safe 2-level deep custom properties.</p>
<p><q>Sounds like Typescript and SCSS right? Incremental adoption for tighter systems.</q></p>

        <h2>
          Design systems relevance
          <a name="design-systems-relevance" href="#design-systems-relevance">#</a>
        </h2>
       <p>Let&#39;s build a <strong>typed light and dark adaptive color scheme</strong> starter!</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,q_auto/argyleink/typed-adaptive-surfaces.mp4 
            width="1920" 
            height="1080"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/typed-adaptive-surfaces.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p>First, a type safe brand hue. I&#39;ll be making an <code>&lt;input type=text&gt;</code> element that will write to this value whatever we type in it. Since it&#39;s type safe, we&#39;ll see how other custom properties that depend on it, won&#39;t break if the value of <code>--hue</code> is set to &quot;poots&quot; or something.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@property</span><span style="color: var(--shiki-color-text)"> --hue {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax: &#39;&lt;angle</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">initial-value</span><span style="color: var(--shiki-color-text)">: 5rad;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits: true;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>For brevity, I&#39;ll only be setting up the surfaces of an adaptive color scheme, it&#39;ll provide plenty of insights into the process of typing a design system. </p>
<p>Here&#39;s 3 surfaces, 1 to be the background of the page <code>--surface</code>, and 2 others that are intended to either be a surface on top of the page bg or under. Their initial value isn&#39;t an exciting, but we&#39;ll get there in the next part.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@property</span><span style="color: var(--shiki-color-text)"> --surface {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax: &#39;&lt;color</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">initial-value</span><span style="color: var(--shiki-color-text)">: #333;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits: true;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@property</span><span style="color: var(--shiki-color-text)"> --surface-over {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax: &#39;&lt;color</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">initial-value</span><span style="color: var(--shiki-color-text)">: #444;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits: true;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@property</span><span style="color: var(--shiki-color-text)"> --surface-under {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax: &#39;&lt;color</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">initial-value</span><span style="color: var(--shiki-color-text)">: #222;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits: true;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><q class="info">The important bit here is that they&#39;re a color type.</q></p>
<p>Now, we can assign more meaningful values to the surface colors. You could use <code>@media (prefers-color-scheme)</code> if you like, but here, since I wanted to show light and dark with a switch, I&#39;m using <code>:has()</code>:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@layer</span><span style="color: var(--shiki-color-text)"> demo.theme {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-token-function)">:has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">#light:checked</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">color-scheme</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">light</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(90</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> .05 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface-over</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(99</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> .02 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface-under</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(85</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> .075 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-token-function)">:has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">#dark:checked</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">color-scheme</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dark</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(20</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> .1 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface-over</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(30</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> .1 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface-under</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(15</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> .1 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>That&#39;s essentially the setup and orchestration for a type safe custom property setup. All that&#39;s left is to use them. Check out the Codepen to see all the neat ways these are valuable in creating an adaptive color scheme: box-shadows, borders, and more!</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/MWZyMXG?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/MWZyMXG">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>

        <h2>
          The last part
          <a name="the-last-part" href="#the-last-part">#</a>
        </h2>
       <p>The &quot;theme tint&quot; text input in the demo, go ahead and start typing crap into it. None of the color system will fail due to a typo or assigned value that doesn&#39;t match the type. The browser knows exactly how to fallback and handle the errors.</p>
<p>You could build a very very robust and large system on <code>@property</code>. The same types of type safety during development that you like with Typescript, but the types actually ship to the browser and are enforced. Rad.</p>
<p>Firefox is almost done with their implementation, which will make <code>@property</code> cross browser stable üéâ </p>
<p><a href="https://caniuse.com/mdn-css_at-rules_property">See caniuse for availability status</a>.</p>
<p><strong>Design systems are about to get a lot smarter and more stable.</strong></p>
]]></description>
            <link>https://nerdy.dev/cant-break-this-design-system?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/cant-break-this-design-system?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Fri, 01 Sep 2023 17:59:18 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/at-property-typed.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/at-property-typed.png"/>
        </item>
        <item>
            <title><![CDATA[The Css Podcast Why Do I Have Layout Shift]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/csspod-layout-shift.jpg" alt="Una and I happy and excited for this episode on why you might have layout shift" height="720"  width="1280" />
        <p>Next up on <a href="https://www.youtube.com/playlist?list=PLNYkxOF6rcIAx_S2LSfXQLorIeehsPL3q">The CSS Podcast</a>‚Ä¶</p>
<p><span class="Tag">Ep #71</span><br><strong>Why do I have layout shift?</strong> </p>
<p><a href="https://www.youtube.com/watch?v=bffwdyKoS8Q&list=PLNYkxOF6rcIAx_S2LSfXQLorIeehsPL3q">Watch</a> ¬∑ 
<a href="https://thecsspodcast.libsyn.com">Listen</a></p>
]]></description>
            <link>https://nerdy.dev/the-css-podcast-why-do-i-have-layout-shift?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/the-css-podcast-why-do-i-have-layout-shift?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[media]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[Adam@theCSSpodcast]]></dc:creator>
            <pubDate>Wed, 30 Aug 2023 18:14:39 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/csspod-layout-shift.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/csspod-layout-shift.jpg"/>
        </item>
        <item>
            <title><![CDATA[State Of Css 2023 Party]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/state-of-css-2023-party.png" alt="Me, Stacy and Stephanie on a title card with the show name on it and the PodRocket logo." height="1377"  width="2540" />
        <p>Was on <strong>The CSS Survey&#39;s</strong> <a href="https://www.twitch.tv/videos/1908492849">Live Stream Party</a>!</p>
<p>‚úÖ give <a href="https://twitter.com/SachaGreif">Sacha</a> and <a href="https://chenhuijing.com/#%F0%9F%96%8C">Hui</a> a follow!<br>‚úÖ sink your teeth into that <a href="https://2023.stateofcss.com">juicy data</a><br>‚úÖ hear predictions and suprises!  </p>
<p><a href="https://2023.stateofcss.com">Just take me to the results</a></p>
]]></description>
            <link>https://nerdy.dev/state-of-css-2023-party?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/state-of-css-2023-party?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[media]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Fri, 25 Aug 2023 23:35:50 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/state-of-css-2023-party.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/state-of-css-2023-party.png"/>
        </item>
        <item>
            <title><![CDATA[The Css Podcast Why Is My Image Distorted]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/csspod-image-distorted.jpg" alt="Una and I happy and excited for this episode on why you might have a distorted image" height="720"  width="1280" />
        <p>Next up on <a href="https://www.youtube.com/playlist?list=PLNYkxOF6rcIAx_S2LSfXQLorIeehsPL3q">The CSS Podcast</a>‚Ä¶</p>
<p><span class="Tag">Ep #70</span><br><strong>Why do I have a distorted image?</strong> </p>
<p><a href="https://www.youtube.com/watch?v=bxz-sOxXQsA&list=PLNYkxOF6rcIAx_S2LSfXQLorIeehsPL3q">Watch</a> ¬∑ 
<a href="https://thecsspodcast.libsyn.com/70-why-is-my-image-distorted">Listen</a></p>
]]></description>
            <link>https://nerdy.dev/the-css-podcast-why-is-my-image-distorted?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/the-css-podcast-why-is-my-image-distorted?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[media]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[Adam@theCSSpodcast]]></dc:creator>
            <pubDate>Fri, 25 Aug 2023 18:14:39 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/csspod-image-distorted.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/csspod-image-distorted.jpg"/>
        </item>
        <item>
            <title><![CDATA[2023 Summer Cabin Vacation]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/2023-cabin-01.jpg" alt="My partner and I" height="1920"  width="1080" />
        <p>Had a great vacation!<br>‚úÖ kids at grandma&#39;s<br>‚úÖ chilled hard w/ <a href="https://www.inkberrytattoo.com">my partner</a><br>‚úÖ bought <a href="https://goldtonemusicgroup.com/goldtone/instruments/ac-5">a banjo</a>! (always been intimidated)<br>‚úÖ played <strong>a lot</strong> of banjo and banjolele<br>‚úÖ built a CSS demo or two‚Ä¶<br>‚ùå play video games  </p>
]]></description>
            <link>https://nerdy.dev/2023-summer-cabin-vacation?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/2023-summer-cabin-vacation?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 24 Aug 2023 21:06:12 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/2023-cabin-01.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/2023-cabin-01.jpg"/>
        </item>
        <item>
            <title><![CDATA[History About The Bad At Css Podcast Logo]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bad-at-css-pod-wide.png" alt="some title" height="518"  width="1158" />
        <p><strong>Bad At CSS Podcast</strong><br>‚Æë logo made in the browser</p>
<p>‚úÖ intentionally no font<br>‚úÖ lack of any styles üòâ<br>‚úÖ looks like you&#39;re in devtools<br>‚úÖ bad layout<br>‚úÖ bad colors<br>‚úÖ box around bad is bad  </p>
<p><a href="https://codepen.io/argyleink/full/bGOGwNV">Codepen</a> ¬∑ <a href="https://open.spotify.com/show/5vtb28Q1QNzgv07v9LzpGp">Spotify</a></p>
]]></description>
            <link>https://nerdy.dev/history-about-the-bad-at-css-podcast-logo?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/history-about-the-bad-at-css-podcast-logo?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[media]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Fri, 18 Aug 2023 04:44:42 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bad-at-css-pod-wide.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bad-at-css-pod-wide.png"/>
        </item>
        <item>
            <title><![CDATA[The Css Podcast Why Do I Have Overflow]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-podcast-overflow.jpg" alt="Una and I happy and excited for this episode on why you might have unwanted overflow" height="720"  width="1280" />
        <p>Next up on <a href="https://www.youtube.com/playlist?list=PLNYkxOF6rcIAx_S2LSfXQLorIeehsPL3q">The CSS Podcast</a>‚Ä¶</p>
<p><span class="Tag">Ep #68</span><br><strong>Why is it overflowing?</strong> </p>
<p><a href="https://www.youtube.com/watch?v=e7PLvudkTE0&list=PLNYkxOF6rcIAx_S2LSfXQLorIeehsPL3q&index=1">Watch</a> ¬∑ 
<a href="https://thecsspodcast.libsyn.com/69-why-is-it-overflowing">Listen</a></p>
]]></description>
            <link>https://nerdy.dev/the-css-podcast-why-do-i-have-overflow?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/the-css-podcast-why-do-i-have-overflow?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[media]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[Adam@theCSSpodcast]]></dc:creator>
            <pubDate>Thu, 17 Aug 2023 15:28:42 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-podcast-overflow.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-podcast-overflow.jpg"/>
        </item>
    </channel>
</rss>