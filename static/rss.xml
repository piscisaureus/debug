<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title><![CDATA[Adam Argyle]]></title>
        <description><![CDATA[RSS Feed for Adam Argyle: Web design & development tips & tricks: CSS, JS, HTML, Design, & UX.]]></description>
        <link>https://nerdy.dev</link>
        <image>
            <url>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</url>
            <title>Adam Argyle</title>
            <link>https://nerdy.dev</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 10 Jan 2023 06:46:37 GMT</lastBuildDate>
        <atom:link href="https://nerdy.dev/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[2023 Adam Argyle]]></copyright>
        <language><![CDATA[en]]></language>
        <webMaster><![CDATA[adam.is@nerdy.dev (Adam Argyle)]]></webMaster>
        <ttl>60</ttl>
        <category><![CDATA[CSS]]></category>
        <category><![CDATA[HTML]]></category>
        <category><![CDATA[JavaScript]]></category>
        <category><![CDATA[Front-End]]></category>
        <category><![CDATA[Design]]></category>
        <icon>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</icon>
        <logo>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/skull-card.png</logo>
        <item>
            <title><![CDATA[Text Replace Transitions]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/text-replace-transitions.png" alt="setInterval(() => {
  document.startViewTransition(() => {
  h1.textContent = word[index++]
})}, 500)
" height="626"  width="1820" />
        <p>First up, the good stuff, <em>the final demo</em>, as if you skipped to the end.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/KKBWwMr?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/KKBWwMr">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
<p>If that&#39;s basically an error message about support, here&#39;s a recording of it running in Canary (with <a href="chrome://flags/#view-transition">this flag enabled</a> 😉.</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/argyleink/view-transitions.mp4 
            width="810" 
            height="608"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/argyleink/view-transitions.jpg"
            controls 
            preload="true"
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p><strong>tldr;</strong><br><a href="https://developer.chrome.com/docs/web-platform/view-transitions/"><code>view-transition</code></a>&#39;s let me, <strong>with CSS</strong>, describe how to dismiss the old text state and reveal the new text state.</p>

        <h2>
          The inspo
          <a name="the-inspo" href="#the-inspo">#</a>
        </h2>
       <p>This demo idea came from the game <a href="https://store.steampowered.com/agecheck/app/861650/">Session Skate</a>. In the opening credits, &quot;SESSION&quot; has each letter rapidly cross fade. It looked pretty coo and I instantly realized I could do this with <a href="https://developer.chrome.com/docs/web-platform/view-transitions/"><code>view-transition</code></a>&#39;s, <code>setInterval()</code>, and <code>.textContent</code>. So I sent myself the email todo, cuz well, it was time to land a sick trick, not work.</p>
<p>That turned into a small prototype. Peep these barebones!</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">setInterval</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.startViewTransition</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> word[index</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (index </span><span style="color: var(--shiki-token-keyword)">&gt;=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">word</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) index </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  })</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">500</span><span style="color: var(--shiki-color-text)">)</span></span></code></pre>
</code></pre>
<ol>
<li>Every half a second</li>
<li>Take a quick &quot;before&quot; snapshot</li>
<li>Set some new text content</li>
</ol>
<p>When the work finishes in that view transition callback, the browser interpolates between the changes for you, for free. In our case, there was a &quot;V&quot;, now there&#39;s an &quot;i&quot;. One letter disappeared, one letter appeared. We get a crossfade!</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/argyleink/view-transitions-cross.mp4 
            width="702" 
            height="286"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/argyleink/view-transitions-cross.jpg"
            controls 
            preload="true"
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/BaPWpmQ?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/BaPWpmQ">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
<p>There. We matched the video game.</p>

        <h2>
          Customizing the transition; aka spinkling props
          <a name="customizing-the-transition;-aka-spinkling-props" href="#customizing-the-transition;-aka-spinkling-props">#</a>
        </h2>
       <p>Crossfades are coo (fo real y&#39;all), but what if I want to customize how the text swaps? Perhaps with some <a href="https://open-props.style">Open Props</a>?</p>
<p><strong>No prob</strong> 🤘💀</p>
<p>First thing, <code>@import</code> the <a href="https://open-props.style/#easing">easings</a> and <a href="https://open-props.style/#animations">animations</a>:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;https://unpkg.com/open-props/easings.min.css&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;https://unpkg.com/open-props/animations.min.css&quot;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>
</code></pre>
<p>Next, as an optimization, tell the whole page to chill and not transition when a document transition snapshot is requested.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">view-transition-name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">none</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Now that we said what we dont want to transition, let&#39;s specify what should, the <code>h1</code>!</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* be stable. fix that width. */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inline-size</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-keyword)">em</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* required for view-transitions  </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">     now it&#39;s not the whole page */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">contain</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">layout</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* yo browser; transition this! */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">view-transition-name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">replace-effect</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Remember that <code>view-transition-name</code>, we&#39;ll be able to reference its before and after states in the next section.</p>

        <h3>
          Now for the best part
          <a name="now-for-the-best-part" href="#now-for-the-best-part">#</a>
        </h3>
       <p>Use <a href="https://open-props.style/#animations">some of these props</a> to orchestrate the exit and entry of a character / the DOM snapshots. Let&#39;s start with how the old character should exit; let&#39;s see, I want it to scale out, like away from me, and fade out at the same time.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@media</span><span style="color: var(--shiki-color-text)"> (prefers-reduced-motion</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> no-preference) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">::view-transition-old(</span><span style="color: var(--shiki-token-string-expression)">replace-effect</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">animation</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--animation-fade-out)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--animation-scale-down)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>Delightful magic.</strong><br>
Now for the element entering; fade it in while sliding it up!</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@media</span><span style="color: var(--shiki-color-text)"> (prefers-reduced-motion</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> no-preference) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">::view-transition-new(</span><span style="color: var(--shiki-token-string-expression)">replace-effect</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">z-index</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">animation</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--animation-fade-out) reverse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--animation-slide-in-up)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<q class="info">
the fade-out animation is reversed so opacity doesn't need set to 0.
</q>

<p>Mix and match animation props in that Codepen and have some fun 🙂</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/KKBWwMr?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/KKBWwMr">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>

        <h2>
          outro
          <a name="outro" href="#outro">#</a>
        </h2>
       <p><strong>Fun Stuff!</strong>. </p>
<p>Make a DOM change, describe how to transition the changes. <strong>Love it.</strong> </p>
<small>
  Hope this gets picked up by other browsers 🤞 <a href="https://drafts.csswg.org/css-view-transitions-1/">Peep the spec</a>.
</small>
]]></description>
            <link>https://nerdy.dev/text-replace-transitions?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/text-replace-transitions?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[js]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Tue, 10 Jan 2023 06:46:18 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/text-replace-transitions.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/text-replace-transitions.png"/>
        </item>
        <item>
            <title><![CDATA[Coloring With Ollie]]></title>
            <description><![CDATA[
          <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/coloring-skull.mp4" alt="some title" height="2160"  width="2160" />
        <p>Art with the kids 🤘💀</p>
]]></description>
            <link>https://nerdy.dev/coloring-with-ollie?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/coloring-with-ollie?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <dc:creator><![CDATA[Dad@pops]]></dc:creator>
            <pubDate>Sun, 08 Jan 2023 20:54:28 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/coloring-skull.mp4" length="0" type="video/mp4"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/coloring-skull.mp4"/>
        </item>
        <item>
            <title><![CDATA[New CSS Relative Units]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/sizing-units.png" alt="H1 shown using the vmin sizing, with a dropdown element for choosing a different unit." height="229"  width="1088" />
        <p>CSS has had an explosion of new length units, how many of them do you know? Test your skills in <a href="https://codepen.io/argyleink/pen/oNxbNzy">this Codepen</a>, or just explore and see what&#39;s changed since you last looked.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/oNxbNzy?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/oNxbNzy">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>

        <h2>
          What&#39;re these good for?
          <a name="what&#39;re-these-good-for?" href="#what&#39;re-these-good-for?">#</a>
        </h2>
       <p>This site uses the line height <code>lh</code> unit for the drop cap at the beginning of the article! Go ahead and inspect it, but I&#39;ll also paste a snippet of it here:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">::first-letter</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">font-size</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">7</span><span style="color: var(--shiki-token-keyword)">ex</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">font-size</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2lh</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">float</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">start</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>I get to set the font-size to the exact amount of text lines I want the drop cap to span. <strong>Pretty rad</strong>. Then, since I placed it after a more stable unit, it&#39;ll only use this newer unit if the browser understands. Thanks Cascade.</p>

        <h2>
          A note on the cap unit
          <a name="a-note-on-the-cap-unit" href="#a-note-on-the-cap-unit">#</a>
        </h2>
       <p>Maybe you&#39;re <a href="https://seek-oss.github.io/capsize/">already using</a> a <code>cap</code> (capital letter) unit? Or maybe you knew this has been in Firefox for over a year 👀</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">font-size</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5cap</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Chrome doesn&#39;t support <code>cap</code> yet.</p>
<p>I also asked about <code>rcap</code>, which seems like a logical friend for the relative unit to have a root relative counterpart.</p>

        <h2>
          44 units, oh my!
          <a name="44-units,-oh-my!" href="#44-units,-oh-my!">#</a>
        </h2>
       <p>This brings us to a total of <strong>44 CSS length units</strong>. And I don&#39;t think we&#39;re done yet!</p>
]]></description>
            <link>https://nerdy.dev/new-relative-units-ric-rex-rlh-and-rch?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/new-relative-units-ric-rex-rlh-and-rch?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Fri, 06 Jan 2023 16:57:53 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/sizing-units.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/sizing-units.png"/>
        </item>
        <item>
            <title><![CDATA[Collections are coo]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/collections-are-coo.png" alt="CSS selector being compared to a set of JS array methods, doing the same thing." height="511"  width="1351" />
        <p>A fun benefit of always assuming something in your code is an array or collection, is that when its empty, no worries.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.button</span><span style="color: var(--shiki-color-text)"> {}</span></span></code></pre>
</code></pre>
<p><strong>This is a default feature of CSS.</strong> It beautifully handles an empty set of results, iterating over each match when they do arrive. It&#39;s rad, and most CSS selectors work under this assumption; selecting collections.</p>
<p>Javascript can do this empty handling too:</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> buttons </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">buttons</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(item </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(item)) </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// no logs</span></span></code></pre>
</code></pre>
<p>So can JSX, cuz &quot;it&#39;s just Javascript&quot; and <code>.map()</code> is an array method like <code>forEach()</code>:</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-constant)">buttons</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(({text}) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;{text}&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">))}</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// no &lt;button&gt;&#39;s</span></span></code></pre>
</code></pre>
<p>And I&#39;m not trying to wage war on if statements, but they stink.</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (buttons) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// do stuff</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Nothing wrong with if statements, you just need to remember to put them in there, they can stack up, nest, and more… or else the dumb computer will try and do an operation on something that doesn&#39;t exist.</p>
<p>We <em>can</em> get all existential now, which I do enjoy:</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">buttons</span><span style="color: var(--shiki-color-text)">?.text</span></span></code></pre>
</code></pre>
<p>Anyway…</p>
<p>My brain thinks its fun to think about how similar CSS can be to other languages and where it&#39;s got some really killer features. It&#39;s currently back on a kick about how nice it is to work with collections.</p>

        <h2>
          Collections everywhere
          <a name="collections-everywhere" href="#collections-everywhere">#</a>
        </h2>
       <p><a href="https://chrome.google.com/webstore/detail/visbug/cdockenadnadldjbbgcallicgledbeoc?hl=en">VisBug</a> works alot this way under the hood, always assuming the user has selected multiple things or the effects of their change have multiple targets. Taught me alot about systems built on arrays.</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">document</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.querySelectorAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;.button&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(item </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(item))</span></span></code></pre>
</code></pre>
<p>I always have a fun time in that codebase, and it&#39;s hard to crash VisBug because of it.</p>

        <h2>
          Array hayday
          <a name="array-hayday" href="#array-hayday">#</a>
        </h2>
       <p>I feel arrays are most popular in <a href="https://rxjs.dev">RxJS</a> and <a href="https://github.com/fantasyland/fantasy-land">Functional Programming</a>. It&#39;s something I miss about those styles and tools. </p>
<q class="info">
  Fun fact too, RxJS had SQL alias's so you could use select() instead of map(). Don't get me started on how CSS is like SQL!
</q>

<p><strong>But no one really talks about how CSS is like these.</strong><br><small>I guess <a href="https://www.youtube.com/watch?v=tfw0qv63ZUQ&list=PLpT5nMxKrUl9EWrkCbRDqn-H4E-l1di47">I have</a> before</small></p>

        <h2>
          Is it apples and oranges and I&#39;m trippin?
          <a name="is-it-apples-and-oranges-and-i&#39;m-trippin?" href="#is-it-apples-and-oranges-and-i&#39;m-trippin?">#</a>
        </h2>
       <p>Just look at this comparison of CSS and JS, selecting the same things!</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.dark</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">.button</span><span style="color: var(--shiki-color-text)"> {}</span></span></code></pre>
</code></pre>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> buttons </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dark_buttons </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">buttons</span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(button </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">button</span><span style="color: var(--shiki-token-function)">.closest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;.dark&#39;</span><span style="color: var(--shiki-color-text)">))</span></span></code></pre>
</code></pre>
<p><strong>Peep how powerful and succinct CSS is!</strong></p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.blog</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">h2</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">backgroundColor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(200 100</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 90</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(200 82</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 15</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { assignStyle</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> directDescendants</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> byAttr } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./utils.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">blogs</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.flatMap</span><span style="color: var(--shiki-color-text)">(directDescendants)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">byAttr</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;nodeName&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h2&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">assignStyle</span><span style="color: var(--shiki-color-text)">({</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    backgroundColor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hsl(200 100% 90%)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hsl(200 82% 15%)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }))</span></span></code></pre>
</code></pre>
<p>So yeah, even though it wasn&#39;t intuitive for me at first, treating more things as collections or observables that yield values over time, I like the resilience of the code. The way it&#39;ll be evaluated and decide on its own not to run the loop. The way it doesn&#39;t care. </p>
<p><strong>I like it when code doesn&#39;t have to care.</strong></p>
]]></description>
            <link>https://nerdy.dev/collections-are-coo?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/collections-are-coo?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[js]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Fri, 06 Jan 2023 06:46:19 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/collections-are-coo.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/collections-are-coo.png"/>
        </item>
        <item>
            <title><![CDATA[New Year, New Site]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/new-site-2023.png" alt="Background grid of 2023's and the GUI Skull logo in the middle" height="669"  width="1920" />
        
        <h2>
          I&#39;ve joined the indie web
          <a name="i&#39;ve-joined-the-indie-web" href="#i&#39;ve-joined-the-indie-web">#</a>
        </h2>
       <p>Viva RSS, viva owning your content, viva to free expression. Join that <a href="https://indieweb.org/">Indie Web</a> y&#39;all 🤘🏻💀.</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> life </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Year</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.next</span><span style="color: var(--shiki-color-text)">()</span></span></code></pre>
</code></pre>
<p>Instead of joining a different social network, investing in some new walled garden (Mastadon 👀), I&#39;ve decided to take the popular UX/UI patterns, like a social feed, and build them here, where they can&#39;t be taken away or stifled.</p>
<q>
  Ain't no one gonna take my site.
  <cite>Adam Argyle</cite>
</q>


        <h3>
          the stack
          <a name="the-stack" href="#the-stack">#</a>
        </h3>
       <p>After much testing and research, I chose to invest in <a href="https://deno.land">Deno</a> and their <a href="https://fresh.deno.dev">Fresh</a> framework. I appreciate their investment in web standards and focus on being minimal. </p>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,w_auto,dpr_auto,q_auto/argyleink/deno-fresh.png" 
            alt="" 
            title="The next-gen web framework built for speed, reliability and simplicity " 
            decoding="async"
            width="1570" 
            height="588"
          /></p>
<p>It&#39;s also a server side rendered framework, at the edge, which means I can fix my site within seconds and don&#39;t have to wait for long static build and deploy times. Deno Fresh also caches at the edge, just in time 😍</p>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,w_auto,dpr_auto,q_auto/argyleink/fresh-features.png" 
            alt="" 
            title="A screenshot of the feature list from the Deno Fresh website " 
            decoding="async"
            width="1538" 
            height="854"
          /></p>
<p>SSR and progressive enhancement <strong>FTW</strong>.</p>

        <h3>
          the styles
          <a name="the-styles" href="#the-styles">#</a>
        </h3>
       <p>Fresh is pretty minimal out of the box, especially in regards to styling. It only offers a just in time atomic stylesheet setup, but I wanted to use <a href="https://open-props.style">Open Props</a> (naturally). So I ended up writing my own file system watcher task that compiles <a href="https://postcss.org/">PostCSS</a> and pops it out to the <code>static/</code> directory for cached serving.</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { debounce } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;$std/async/mod.ts&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">watchAndBuildStyles</span><span style="color: var(--shiki-color-text)">() {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Deno</span><span style="color: var(--shiki-token-function)">.watchFs</span><span style="color: var(--shiki-color-text)">([</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;./styles/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;./components/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;./islands/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ])</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">protectedBuildCall</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">debounce</span><span style="color: var(--shiki-color-text)">(buildStyles</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_event</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> watcher)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">protectedBuildCall</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>This route also means I&#39;m in full control of the stylesheet. That was very critical to me as I want to use my site as a playground for new CSS features, progressively enhancing UX when available but otherwise serving a great static experience.</p>
<p>Here&#39;s my list of plugins if you&#39;re curious:</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> cssNesting </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;npm:postcss-nesting&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> customMediaPlugin </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;npm:postcss-custom-media&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> mqRanges </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;npm:postcss-media-minmax&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> inlineImports </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;npm:postcss-import&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> importUrl </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;npm:postcss-import-url&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> importGlob </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;npm:postcss-import-ext-glob&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> cssnano </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;npm:cssnano&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> OpenProps </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;npm:open-props&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> jitProps </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;npm:postcss-jit-props&#39;</span></span></code></pre>
</code></pre>
<p>A small preview of my <code>index.css</code> file. Spoiler, it&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@layer">layers</a> all the way, and I looooved it.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;https://unpkg.com/open-props/normalize.min.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(base.normalize);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;https://unpkg.com/open-props/theme.light.switch.min.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(base.theme);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;https://unpkg.com/open-props/theme.dark.switch.min.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(base.theme);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;utilities.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(base.utilities);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;nojs.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(base.nojs);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;toast.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(components.toast);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;markdown.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(components.markdown);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;syntax-highlighting.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(components.syntax);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;neon.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(components.p3);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;quotes.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(components.quote);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import-glob</span><span style="color: var(--shiki-color-text)"> &quot;../components/**/*.css&quot; layer(components.fresh);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import-glob</span><span style="color: var(--shiki-color-text)"> &quot;../islands/**/*.css&quot; layer(components.fresh);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@layer</span><span style="color: var(--shiki-color-text)"> base.normalize-overrides {…}</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@layer</span><span style="color: var(--shiki-color-text)"> overrides {…}</span></span></code></pre>
</code></pre>
<p><strong>It&#39;s 3 layers</strong>: base, components, overrides. Named sublayers for easier debugging and organization.</p>
<p>With that in place, I match a classname to a component name and that&#39;s pretty much it. I have global styles and component styles, all sharing the props and <a href="https://github.com/GoogleChromeLabs/postcss-jit-props">JIT Props</a> makes sure I only ship the props I use. Good stuff.</p>
<q class="info">
  <p>Try the site in Chrome with <a href="chrome://flags/#enable-experimental-web-platform-features">#experimental-web-platform-features</a> enabled. I'll be constantly trialing new features there! I'm currently trialing <a href="https://drafts.csswg.org/scroll-animations-1/">Scroll Linked Animations</a>!</p>
</q>


        <h3>
          light n&#39; dark
          <a name="light-n&#39;-dark" href="#light-n&#39;-dark">#</a>
        </h3>
       <p>Hopefully you noticed there was no &quot;flash of an unwanted color scheme&quot; (FOAUCS) when the page loaded. </p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto/argyleink/theme-switch-overview.mp4 
            width="1922" 
            height="1082"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto/argyleink/theme-switch-overview.jpg"
            controls 
            preload="true"
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p>So many sites strobe light my face with the light theme when the page loads (I&#39;m generally in dark mode), and it makes me feel like a vampire who just got blasted with a sun ray. Sometime they blast me on every single page load… 😱</p>
<p>To make this feature, I followed my own <a href="https://web.dev/building-a-theme-switch-component/">Theme Switch GUI Challenge</a>! I just integrated it into Fresh 🙂</p>
<p>A <strong>few features</strong> of it that make me happy:</p>
<ol>
<li>Works without JS</li>
<li>Remembers your choice</li>
<li>Syncs with the system as it changes</li>
<li>Has a rad animation between a sun and moon with SVG and transforms</li>
<li>No FOAUCS anywhere</li>
<li>Has accessibility considerations</li>
</ol>
<p>Also, don&#39;t miss that <a href="https://web.dev/building-an-adaptive-favicon/">adaptive favicon</a> 😎</p>

        <h2>
          comments and likes
          <a name="comments-and-likes" href="#comments-and-likes">#</a>
        </h2>
       <p>I really like the idea of aggregating mentions of my site&#39;s work onto this site itself, and <a href="https://webmention.io">WebMentions.io</a> let me do that. Once set, with Deno I server side fetch mentions for any sub pages and send the data to some components to handle for rendering.</p>
<p>I think the result is cool. I feel like it&#39;s peer to peer in nature but with a good amount of optional content filtering from the owner side.</p>
<p>I&#39;m not in any <a href="https://en.wikipedia.org/wiki/Webring">webrings</a> yet… should I be?</p>

        <h2>
          multiple personas
          <a name="multiple-personas" href="#multiple-personas">#</a>
        </h2>
       <p>Sometimes people have multiple accounts with a service so they can provide different branded feeds, maybe a personal and a business one for example. I have 6 personas I can be on my site lol:</p>
<ol>
<li><code>admin</code>: when I&#39;m making site updates or announcements</li>
<li><code>google</code>: when posts are related to my work at Google</li>
<li><code>argyleink</code>: when the posts are rando Adam thoughts or comments</li>
<li><code>csspodcast</code>: when new episodes or moments happen for the <a href="https://pod.link/csspodcast">CSS Podcast</a></li>
<li><code>guichallenges</code>: when new episodes or moments happen for the <a href="https://github.com/argyleink/gui-challenges">GUI Challenges</a></li>
<li><code>pops</code>: dad updates</li>
</ol>
<p>I even have an open feature request, to myself, about co-tweeting personas. lol, taking multiple personalities to a new site level.</p>

        <h3>
          404
          <a name="404" href="#404">#</a>
        </h3>
       <p>Make a <code>_404.tsx</code> handler in the <code>routes/</code> directory and you too can make a custom 404 page. Want to see it? Visit <a href="https://nerdy.dev/you-wont-find-this">https://nerdy.dev/you-wont-find-this</a>.</p>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,w_auto,dpr_auto,q_auto/argyleink/custom-404.png" 
            alt="" 
            title="The GUI Skull is shown with a message about not finding the page " 
            decoding="async"
            width="766" 
            height="373"
          /></p>
<p>Open Props made this page easy to style because I could easily bring in the normalize and props <a href="https://unpkg.com/open-props">from a CDN</a> and use them in the template.</p>

        <h3>
          localized dates
          <a name="localized-dates" href="#localized-dates">#</a>
        </h3>
       <p>With a little custom middleware I parse preferred languages from the request headers and then provide a getter to components on the server.</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">req</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">headers</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;accept-language&#39;</span><span style="color: var(--shiki-color-text)">)</span></span></code></pre>
</code></pre>
<p>This feature is both for localization but also for accuracy. The dates shows how long ago the post was made, and by knowing where you are in the world I can provide a date relative to you.</p>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,w_auto,dpr_auto,q_auto/argyleink/localized-dates.png" 
            alt="" 
            title="An example card from this site that shows the dates in Japanese " 
            decoding="async"
            width="818" 
            height="206"
          /></p>

        <h3>
          logical properties
          <a name="logical-properties" href="#logical-properties">#</a>
        </h3>
       <p>I used <a href="https://web.dev/learn/css/logical-properties/">logical properties</a> everywhere, which means the site can do rad stuff like this:</p>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,w_auto,dpr_auto,q_auto/argyleink/traditional-chinese.png" 
            alt="" 
            title="Screenshot of the website homepage in a horizontal right to left layout and translated to Chinese, lookin sharp " 
            decoding="async"
            width="1478" 
            height="880"
          /></p>
<p>and i didnt have to do anything, the browser adapts it for me.</p>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,w_auto,dpr_auto,q_auto/argyleink/traditional-chinese-blog.png" 
            alt="" 
            title="Screenshot of the website blog post in a horizontal right to left layout and translated to Chinese, lookin sharp " 
            decoding="async"
            width="548" 
            height="683"
          /></p>
<p>Turned out Media Queries made this hard though, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries">Container Queries</a> saved the day. Blog post will def come out about it.</p>

        <h3>
          pretty URLs
          <a name="pretty-urls" href="#pretty-urls">#</a>
        </h3>
       <p>I really like minimal URLs and with Deno + Fresh it was really easy. I appreciate that it was the default.</p>

        <h3>
          analytics
          <a name="analytics" href="#analytics">#</a>
        </h3>
       <p><strong>No client side analytics</strong>. </p>
<p>I went with <a href="https://pirsch.io/">Pirsch</a>, and am happy! Cost seems right so they stay alive, great APIs and SDKs, and a really nice dashboard that&#39;s simple but powerful.</p>
<p>I reeeeeeally didn&#39;t want to run some open source containers on the cloud and host my own analytics… just not my kind of Tuesday night activity. Aka, I&#39;m down with a couple extra bucks for a managed solution.</p>

        <h3>
          progressive web app
          <a name="progressive-web-app" href="#progressive-web-app">#</a>
        </h3>
       <p>This site is also a <a href="https://web.dev/progressive-web-apps/">PWA</a>. Go ahead, install it or add it to your homescreen. It launches with a nice splash image, is full screen, and can really feel like a system application.</p>
<p>I&#39;ve implemented the following PWA features so far:</p>
<ol>
<li><code>manifest.json</code></li>
<li>A service worker, mine is very lightweight</li>
<li>Custom icon</li>
<li>Custom install banner image</li>
</ol>
<p>It&#39;s also got a great landscape layout when in fullscreen 🤓</p>

        <h3>
          forced colors
          <a name="forced-colors" href="#forced-colors">#</a>
        </h3>
       <p>Where there are shadows and colors to help distinguish UI elements, they&#39;re replaced with a transparent 1px border so that in <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors#:~:text=The%20forced%2Dcolors%20CSS%20media,is%20Windows%20High%20Contrast%20mode."><code>forced-colors-mode</code></a> there are visual affordances for distinguishing elements.</p>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,w_auto,dpr_auto,q_auto/argyleink/forced-colors.png" 
            alt="" 
            title="A screenshot of a post item detail view with forced colors enabled " 
            decoding="async"
            width="1206" 
            height="1008"
          /></p>
<p>I also think the retro colors are super rad. Sometimes I use this mode if a site doesn&#39;t have a dark theme, it&#39;ll force a cool retro one!</p>

        <h3>
          works without javascript
          <a name="works-without-javascript" href="#works-without-javascript">#</a>
        </h3>
       <p>The site tries to only use JavaScript to enhance the experience, not relying on it for the baseline behavior.</p>

        <h3>
          uses some GUI Challenges
          <a name="uses-some-gui-challenges" href="#uses-some-gui-challenges">#</a>
        </h3>
       <p>You&#39;ll find the <a href="https://web.dev/building-a-toast-component/">toast</a>, <a href="https://web.dev/building-a-dialog-component/">dialog</a>, <a href="https://web.dev/building-a-theme-switch-component/">theme switch</a>, <a href="https://web.dev/building-an-adaptive-favicon/">adaptive favicon</a> and more to come.</p>
<p><a href="https://github.com/argyleink/gui-challenges">Checkout all the GUI Challenges</a></p>

        <h3>
          keyboard navigation
          <a name="keyboard-navigation" href="#keyboard-navigation">#</a>
        </h3>
       <p>Give it a shot, try navigating around with the keyboard. There&#39;s a <a href="https://css-tricks.com/how-to-create-a-skip-to-content-link/">skip link</a> in the nav bar, special scroll snap UX in the home feed, arrow key support in the filter aside, and great focus styles. </p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto/argyleink/site-keyboard-nav-example.mp4 
            width="1920" 
            height="1160"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto/argyleink/site-keyboard-nav-example.jpg"
            controls 
            preload="true"
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>

        <h3>
          rss
          <a name="rss" href="#rss">#</a>
        </h3>
       <p><strong>I freakin love RSS</strong>. Peer to peer social interation, nothin in the middle, so good. I&#39;ve been an RSS reader for over 10 years, it&#39;s by far the best place for me to get meaningful information. Well, now I have a feed!</p>
<p>The RSS feed is the backbone of the site, it&#39;s an artifact that allows the content to travel and adapt to reader&#39;s preferences. You can subscribe from an RSS reader, from Chrome using <a href="https://www.engadget.com/google-chrome-rss-follow-button-android-181659150.html">the follow feature</a>, or just follow along on Twitter where I syndicate the content.</p>
<p><a href="/rss.xml">Subscribe</a> why don&#39;t ya?!</p>

        <h3>
          media
          <a name="media" href="#media">#</a>
        </h3>
       <p>Everything is <em>currently</em> uploaded into <a href="https://cloudinary.com">Cloudinary</a> and then I&#39;ve created a few authoring conveniences in Fresh and when writing Markdown that utilize all their great features.</p>
<p>I try to be respectful with the media delivery: </p>
<ul>
<li>reliable <code>alt</code> content</li>
<li><a href="https://web.dev/browser-level-image-lazy-loading/"><code>lazy</code></a> loading</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding"><code>async</code></a> decoding</li>
<li><a href="https://web.dev/performance-optimizing-content-efficiency-client-hints/">client hints</a></li>
<li>multiple formats (webp, avif, etc)</li>
<li>compressed</li>
<li>delivered from CDNs near you</li>
<li>videos always offer controls and only loop on demand</li>
</ul>

        <h3>
          pride moment
          <a name="pride-moment" href="#pride-moment">#</a>
        </h3>
       <p>this can&#39;t be found in my styles:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">overflow-x</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">hidden</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>🤓</p>
]]></description>
            <link>https://nerdy.dev/new-year-new-site?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/new-year-new-site?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[js]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Sun, 01 Jan 2023 00:57:50 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/new-site-2023.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/new-site-2023.png"/>
        </item>
        <item>
            <title><![CDATA[Gradient hue interpolation]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gradient-hue-interpolation.png" alt="A gradient from blue to purple is shown represented 4 ways, shorter, longer, increasing and decreasing." height="1148"  width="2144" />
        <p>When a gradient needs to transition from one color to the next, it takes the <a href="https://www.w3.org/TR/css-color-4/#hue-shorter">shortest</a> route it can. But what if the result of that stinks?</p>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,w_auto,dpr_auto,q_auto/argyleink/gradient-hue-distance.png" 
            alt="" 
            title="A circle gradient representing all hues and is white in the center, where a smaller inner circle shows the difference between shorter and longer routes " 
            decoding="async"
            width="389" 
            height="388"
          /></p>

        <h3>
          Hue interpolation
          <a name="hue-interpolation" href="#hue-interpolation">#</a>
        </h3>
       <p>That&#39;s where new CSS gradient syntax from <a href="https://www.w3.org/TR/css-color-4">Color 4</a> for <a href="https://www.w3.org/TR/css-color-4/#hue-interpolation">hue interpolation</a> comes in. Here I specify the gradient takes the <a href="https://www.w3.org/TR/css-color-4/#hue-longer">longer</a> route:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.gradient-with-hue-interpolation-specified</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">linear-gradient</span><span style="color: var(--shiki-token-constant)">(</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    </span><span style="color: var(--shiki-token-keyword)">to</span><span style="color: var(--shiki-token-constant)"> right in hsl longer hue</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    oklch(63</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 0.3 317)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    oklch(63</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 0.2 255</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>It&#39;s almost like the browser has been Zoolander this whole time, it would only turn right 😂</p>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,w_auto,dpr_auto,q_auto/argyleink/zoolander-left.jpg" 
            alt="" 
            title="null" 
            decoding="async"
            undefined
            undefined
          /></p>
<p>Here&#39;s 2 demo&#39;s that use <a href="https://colorjs.io/">ColorJS</a> to help illustrate the effects of this hue interpolation choice. Aka, demo&#39;s that help the browser turn left hehe.</p>

        <h3>
          Blue to Purple example
          <a name="blue-to-purple-example" href="#blue-to-purple-example">#</a>
        </h3>
       <p>A soft intro example into the topic:</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/GRGPxEJ?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/GRGPxEJ">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>

        <h3>
          Interactive demo
          <a name="interactive-demo" href="#interactive-demo">#</a>
        </h3>
       <p>This one let&#39;s you pick the colors and number of steps:</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/JjZajmb?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/JjZajmb">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
<p>So so many more color tools coming to the browser!</p>
]]></description>
            <link>https://nerdy.dev/gradients-going-the-shorter-longer-increasing-or-decreasing-route?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/gradients-going-the-shorter-longer-increasing-or-decreasing-route?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Thu, 29 Dec 2022 21:48:22 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gradient-hue-interpolation.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gradient-hue-interpolation.png"/>
        </item>
        <item>
            <title><![CDATA[Media Query Ranges]]></title>
            <description><![CDATA[<p><a href="https://www.bram.us/2021/10/26/media-queries-level-4-media-query-range-contexts/">Media Query Ranges</a> </p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto/argyleink/media-ranges-looper.mp4 
            width="2366" 
            height="1080"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto/argyleink/media-ranges-looper.jpg"
            controls 
            preload="true"
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p>I find this so much more readable.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@media</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">width</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&lt;=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">720</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">) {}</span></span></code></pre>
</code></pre>
<p><a href="https://caniuse.com/css-media-range-syntax">Caniuse</a> says we&#39;re waitin on Safari to bring it from TechP to Stable; aka plugin still required 😭</p>
]]></description>
            <link>https://nerdy.dev/media-query-ranges?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/media-query-ranges?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 29 Dec 2022 05:43:51 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Thinking On Ways To Do Ui Physics Effects]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gui-physics.jpg" alt="GUI Challenges character next to a set of controls for mass, tension, friction and start velocity" height="720"  width="1280" />
        <p><a href="https://www.youtube.com/watch?v=eamAHF71ZN4&list=PLNYkxOF6rcIAaV1wwI9540OC_3XoIzMjQ">Thinking on ways to do <strong>UI Physics</strong></a>  </p>
<p>In this <a href="https://goo.gle/GUIchallenges">GUI Challenge</a>, 
<a href="https://www.youtube.com/channel/UCBGr3ZMcV5jke40_Wrv3fNA">I</a> use <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame">requestAnimationFrame</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*">custom properties</a> to make bouncy and jelloey springy UI effects.</p>
<p><a href="https://gui-challenges.web.app/spring-physics/dist/">demo</a> · 
<a href="https://github.com/argyleink/gui-challenges">source</a></p>
]]></description>
            <link>https://nerdy.dev/thinking-on-ways-to-do-UI-physics-effects?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/thinking-on-ways-to-do-UI-physics-effects?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[media]]></category>
            <dc:creator><![CDATA[Adam@GUIchallenges]]></dc:creator>
            <pubDate>Wed, 28 Dec 2022 15:52:44 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gui-physics.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gui-physics.jpg"/>
        </item>
        <item>
            <title><![CDATA[Individual Transforms]]></title>
            <description><![CDATA[
          <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/individual-transforms-infinite.mp4" alt="Infinite video example of a CSS snippet changing between syntax options." height="1080"  width="2366" />
        <p><a href="https://web.dev/css-individual-transform-properties/">Individual transforms</a> are <strong>rad</strong>.<br><small>when you don&#39;t need to manage the order</small></p>
]]></description>
            <link>https://nerdy.dev/individual-transforms?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/individual-transforms?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Sat, 24 Dec 2022 06:36:29 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/individual-transforms-infinite.mp4" length="0" type="video/mp4"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/individual-transforms-infinite.mp4"/>
        </item>
        <item>
            <title><![CDATA[Things Css Could Still Use In 2023]]></title>
            <description><![CDATA[<p><a href="https://chriscoyier.net/2022/12/21/things-css-could-still-use-heading-into-2023/">Things CSS Could Still Use Heading Into 2023</a></p>
<blockquote>
<p>Just a couple of ideas!<br><cite><a href="https://chriscoyier.net">Chris Coyier</a></cite></p>
</blockquote>
<hr>

<details>
  <summary>They're great ideas</summary>  

<ul>
<li>Styleable resize handles</li>
<li>Regions</li>
<li>Standardized multi-line</li>
<li>Mixins &amp; extends</li>
<li>Inline truncation</li>
<li>Animate to auto</li>
<li>Nesting 😎</li>
</ul>
</details>

<p><strong>Missing</strong> <a href="https://twitter.com/argyleink/status/1531423959362678785"><code>text-wrap</code></a> tho!</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">h2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">h3</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">text-wrap</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">balance</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
]]></description>
            <link>https://nerdy.dev/things-css-could-still-use-in-2023?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/things-css-could-still-use-in-2023?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 22 Dec 2022 05:00:05 GMT</pubDate>
        </item>
    </channel>
</rss>