<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title><![CDATA[Adam Argyle]]></title>
        <description><![CDATA[RSS Feed for Adam Argyle: Web design & development tips & tricks: CSS, JS, HTML, Design, & UX.]]></description>
        <link>https://nerdy.dev</link>
        <image>
            <url>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</url>
            <title>Adam Argyle</title>
            <link>https://nerdy.dev</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 02 Feb 2023 17:10:32 GMT</lastBuildDate>
        <atom:link href="https://nerdy.dev/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[2023 Adam Argyle]]></copyright>
        <language><![CDATA[en]]></language>
        <webMaster><![CDATA[adam.is@nerdy.dev (Adam Argyle)]]></webMaster>
        <ttl>60</ttl>
        <category><![CDATA[CSS]]></category>
        <category><![CDATA[HTML]]></category>
        <category><![CDATA[JavaScript]]></category>
        <category><![CDATA[Front-End]]></category>
        <category><![CDATA[Design]]></category>
        <icon>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</icon>
        <logo>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/skull-card.png</logo>
        <item>
            <title><![CDATA[Hd Color Guide]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-hd-color.png" alt="Wizard of Oz image with Dorothy going from black and white to color." height="714"  width="1180" />
        <p><a href="https://developer.chrome.com/articles/high-definition-css-color-guide/"><strong>CSS HD Color Guide</strong></a></p>
<p>Meet the <strong>new web color spaces</strong>!</p>
<ol>
<li>What is a color gamut or color space</li>
<li>Review of the classic color spaces</li>
<li>Meet the new web color spaces</li>
<li>Migrating to HD CSS color</li>
<li>Debugging color</li>
</ol>
<p><strong>It&#39;s the article I wish I had</strong> when learning about CSS color updates.</p>
]]></description>
            <link>https://nerdy.dev/hd-color-guide?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/hd-color-guide?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Thu, 02 Feb 2023 17:07:46 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-hd-color.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-hd-color.png"/>
        </item>
        <item>
            <title><![CDATA[Thinking on GLITCH effects]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gui-glitch.png" alt="Adam avatar smiling in front of a grungy font with the word CYBERPINK." height="1650"  width="3116" />
        <p>I&#39;ve seen a lot of rad glitch effects as of late and wanted to share <a href="https://www.youtube.com/watch?v=MR7dClW6iBg&list=PLNYkxOF6rcIAaV1wwI9540OC_3XoIzMjQ">my thinking on how to make the effect</a>.</p>

        <h2>
          Watch it
          <a name="watch-it" href="#watch-it">#</a>
        </h2>
       <iframe width="560" height="315" src="https://www.youtube.com/embed/MR7dClW6iBg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>


        <h3>
          Chapters:
          <a name="chapters:" href="#chapters:">#</a>
        </h3>
       <p>0:00 - Introduction<br>0:38 - Overview<br>2:00 - Debugging Corner<br>3:34 - clip-path grunge<br>4:41 - transform<br>5:55 - clip-path keyframes<br>6:45 - transform keyframes<br>7:50 - HTML<br>8:17 - CSS<br>9:56 - JS<br>12:46 - Debugging Keyframes<br>13:13 - Outro  </p>

        <h2>
          Try it
          <a name="try-it" href="#try-it">#</a>
        </h2>
       <p><a href="https://gui-challenges.web.app/glitch/dist/">Checkout the demo</a> which has a generator for grungy <code>clip-path</code> <code>polygon()</code>&#39;s!</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,q_auto/argyleink/gui-glitch-preview.mp4 
            width="1920" 
            height="1082"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/gui-glitch-preview.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p>Also, see the skull icon in the top left of this page? It&#39;s totally using the technique from this challenge ü§òüèªüíÄ</p>
]]></description>
            <link>https://nerdy.dev/thinking-on-ways-to-solve-glitch-effects?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/thinking-on-ways-to-solve-glitch-effects?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[Adam@GUIchallenges]]></dc:creator>
            <pubDate>Wed, 01 Feb 2023 18:29:23 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gui-glitch.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gui-glitch.png"/>
        </item>
        <item>
            <title><![CDATA[Easy Hsl Rainbow]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/hsl-rainbow.jpg" alt="All colors of the rainbow in a gradient from left to right." height="628"  width="3180" />
        <p><strong>CSS color tip!</strong></p>
<p>Need a <a href="https://codepen.io/argyleink/pen/yLqREaq">rainbow gradient</a>? Let <code>&lt;hue-interpolation&gt;</code> do the work.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.vibrant-rainbow</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">linear-gradient</span><span style="color: var(--shiki-token-constant)">(</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    </span><span style="color: var(--shiki-token-keyword)">to</span><span style="color: var(--shiki-token-constant)"> right </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    in hsl      </span><span style="color: var(--shiki-token-comment)">/* vibrant gradient HSL colorspace */</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    longer hue</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-comment)">/* hue-interpolation set to longer */</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    red</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> red    </span><span style="color: var(--shiki-token-comment)">/* now red to red goes all the way around */</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">  )</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
]]></description>
            <link>https://nerdy.dev/easy-hsl-rainbow?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/easy-hsl-rainbow?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Tue, 31 Jan 2023 20:45:11 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/hsl-rainbow.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/hsl-rainbow.jpg"/>
        </item>
        <item>
            <title><![CDATA[Learn About Color Mix]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/color-mix.png" alt="Two color panels are shown on top with the result of their mix, and a code snippet, underneath." height="1082"  width="2316" />
        <p><strong>CSS color-mix()</strong></p>
<p>I&#39;ve got a new post on <a href="https://developer.chrome.com/">Chrome Developers</a> with everything you need to know.</p>
<p>üìù <a href="https://developer.chrome.com/blog/css-color-mix/">Check it out!</a></p>
]]></description>
            <link>https://nerdy.dev/learn-about-color-mix?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/learn-about-color-mix?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Mon, 30 Jan 2023 16:39:43 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/color-mix.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/color-mix.png"/>
        </item>
        <item>
            <title><![CDATA[Tcss]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/tcss.png" alt="The TS logo and the CSS logo combine into a TcsS logo" height="393"  width="800" />
        <p><strong>TcsS</strong> - Typed Cascade Style Sheets</p>
<p>Why hasn&#39;t this been made yet? CSS has all the type information needed to create a comparable experience to TypeScript.</p>
]]></description>
            <link>https://nerdy.dev/tcss?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/tcss?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Fri, 27 Jan 2023 21:25:36 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/tcss.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/tcss.png"/>
        </item>
        <item>
            <title><![CDATA[10 powerful ways to use CSS variables]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-prop-categories.png" alt="Three custom properties are repeated in a grid and 3D tilted a bit. They are var(--party) var(--power) and var(--mix)." height="421"  width="1280" />
        <p>CSS <a href="https://web.dev/learn/css/functions/#custom-properties-and-var">custom properties</a> are AMAZING. I&#39;m going to attempt to name and roundup all the categories and strategies of custom props that I&#39;ve come across. </p>
<p><q class="info">be sure to comment if you know more strategies!</q></p>

        <h2>
          1. tokens
          <a name="1.-tokens" href="#1.-tokens">#</a>
        </h2>
       <p>These custom properties are <strong>generally just global values</strong>, named objectively, and are used atomically.</p>
<p>They create team alignment by naming what are otherwise &quot;magic numbers.&quot; They often follow naming conventions.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --size-1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-keyword)">rem</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --size-2</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.25</span><span style="color: var(--shiki-token-keyword)">rem</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --blue-1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(200 50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --blue-2</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(200 50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 60</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --gray-0</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(none none 90</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --gray-1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(none none 10</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>Usage of tokens</strong> looks like:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--surface-1)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text-1)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--card-padding)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>It&#39;s very likely these tokens will become values of other custom properties in your CSS because they <strong>are generally static and aren&#39;t overwritten later.</strong>.</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">OpenProps </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> tokens</span></span></code></pre>
</code></pre>

        <h2>
          2. house props
          <a name="2.-house-props" href="#2.-house-props">#</a>
        </h2>
       <p>House props are <strong>named for project reusability</strong>. They also create team alignment, jargon, and can be adaptive (see <a href="#3.-adaptive-props">#3</a>).</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --brand</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--blue-1)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --card-padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--size-1)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --surface</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">#eee</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-constant)">media</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">prefers-color-scheme</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dark</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">#111</span><span style="color: var(--shiki-color-text)">;  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>Usage of house props</strong> looks like:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">border-color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--brand)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--card-padding)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--surface)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><a href="https://open-props.style">Open Props</a> offers <code>--surface-{1-4}</code> and <code>--text-{1,2}</code> house props (which adapt to light &amp; dark). They come with use of <a href="https://codepen.io/argyleink/pen/KKvRORE">normalize.css</a>. A light and dark card can be created with a mix of house props and tokens, no media query required as it&#39;s baked into the prop:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--surface-2)</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">/* surface-1 is the page bg */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text-1)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">border-radius</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--radius-2)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--size-3)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">box-shadow</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--shadow-2)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>

        <h2>
          3. adaptive props
          <a name="3.-adaptive-props" href="#3.-adaptive-props">#</a>
        </h2>
       <p>Aka dynamic house props; <strong>these will change</strong>, you expect them to change. They need setup though, orchestrated and empowered with CSS conditionals.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-0)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@media</span><span style="color: var(--shiki-color-text)"> (prefers-color-scheme</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> dark) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-10)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>Usage of adaptive props</strong> looks like:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>I&#39;ve got a tinyyyy bit more verbose pattern for adaptive props; create static house props with names that make their usage obvious (no magic values).</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* 2 static props */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --text-dark-mode</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-0)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --text-light-mode</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-10)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* 1 adaptive prop: defaults to light static prop */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text-light-mode)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-constant)">media</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">prefers-color-scheme</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dark</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* adaptive prop set to dark static prop */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text-dark-mode)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Here&#39;s another example; <strong>adaptive sizing</strong></p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --adaptive-padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">.5</span><span style="color: var(--shiki-token-keyword)">rem</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-constant)">media</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">width</span><span style="color: var(--shiki-color-text)"> &gt;= 320</span><span style="color: var(--shiki-token-constant)">px</span><span style="color: var(--shiki-color-text)">)  { --adaptive-padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-keyword)">rem</span><span style="color: var(--shiki-color-text)"> }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">@media</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">width</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">720</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">)  { --adaptive-padding: 1</span><span style="color: var(--shiki-token-function)">.25rem</span><span style="color: var(--shiki-color-text)"> }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">@media</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">width</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1024</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">) { --adaptive-padding: 1</span><span style="color: var(--shiki-token-function)">.5rem</span><span style="color: var(--shiki-color-text)"> }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Lastly, since media queries aren&#39;t required to make this adaptive props, <a href="https://ishadeed.com/article/conditional-border-radius/">here&#39;s a neat trick</a> by <a href="https://twitter.com/shadeed9">Ahmad Shadeed</a> that bakes the conditions into the math inside the prop. He&#39;s got 1 custom property that will adapt to either square corners when full screen, or rounded corners when not.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">border-radius</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">max(0</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> min(8</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-function)">calc</span><span style="color: var(--shiki-token-constant)">((100</span><span style="color: var(--shiki-token-keyword)">vw</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)"> 4</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)"> 100</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">) * 9999</span><span style="color: var(--shiki-color-text)">)));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Open Props <a href="https://github.com/argyleink/open-props/blob/main/src/props.borders.css#L19-L24">offers these</a> now too, heavily inspired by Ahmad. They look like this in Open Props, which will have a <code>var(--radius-2)</code> sized rounded corners when it&#39;s not full width:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* Open Props sets them up like this */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --radius-conditional-2</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">clamp(0</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-function)">calc</span><span style="color: var(--shiki-token-constant)">(100</span><span style="color: var(--shiki-token-keyword)">vw</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)"> 100</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">) * 1e5</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--radius-2)</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">/* then authors get to use them like this! */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">border-radius</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--radius-conditional-2)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>Love it</strong> when a custom property disguises all the implentation details away from other authors. Reminds me of NPM and installing modules or importing functions.</p>

        <h2>
          4. pseudo-private props
          <a name="4.-pseudo-private-props" href="#4.-pseudo-private-props">#</a>
        </h2>
       <p><a href="https://lea.verou.me/2021/10/custom-properties-with-defaults/">Lea Verou calls these pseudo-private custom properties</a>. I appreciated the throw back to pseudo private properties in Javascript.</p>
<pre><code class="language-js"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">._foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;please dont change this&#39;</span></span></code></pre>
</code></pre>
<p>Then us mimmicking it in CSS:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_radius</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Which makes them like <strong>static tokens</strong> or <strong>house props</strong>, but <strong>scoped instead of global</strong>. </p>
<p><a href="https://vanilla-extract.style">Vanilla Extract</a> offers scoped custom properties, they use this &quot;pseudo-private&quot; technique in the CSS output.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.button__1qipc2y2</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_1qipc2y0</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">#4263eb</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_1qipc2y1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">#edf2ff</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--_1qipc2y0)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--_1qipc2y1)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">.button__1qipc2y2:active</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_1qipc2y0</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">#3b5bdb</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_1qipc2y1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">white</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><a href="https://twitter.com/argyleink/status/1559408336851742720?s=20&t=vz9YNAbMi6zlcLjaBDtaKQ">A tweet about this.</a></p>

        <h2>
          5. partial props
          <a name="5.-partial-props" href="#5.-partial-props">#</a>
        </h2>
       <p>Prop puzzle pieces. <strong>Parts of a full usable prop</strong>. Here, brand color channels as partial props.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --h</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">200</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --s</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --l</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>Usage of partial props</strong> to make <a href="#3.-adaptive-props">adaptive props</a> looks like:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --brand</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--h) </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--s) </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--l))</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--h) 30</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 5</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --surface</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--h) 25</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 99</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@media</span><span style="color: var(--shiki-color-text)"> (prefers-color-scheme</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> dark) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --brand</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--h) </span><span style="color: var(--shiki-token-function)">calc</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--s) </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-token-constant)"> 2) </span><span style="color: var(--shiki-token-function)">calc</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--l) </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-token-constant)"> 2))</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--h) 10</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 90</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--h) 20</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 10</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>

        <h2>
          6. mixin props
          <a name="6.-mixin-props" href="#6.-mixin-props">#</a>
        </h2>
       <p>I first saw this usage of CSS vars <a href="https://www.smashingmagazine.com/2019/07/css-custom-properties-cascade/#custom-functions-and-parameters">on Smashing Magazine</a> by <a href="https://www.oddbird.net/authors/miriam/">Miriam Suzanne</a>. Great distillation of it in this <a href="https://codepen.io/miriamsuzanne/pen/BEvjbm">Codepen</a>.</p>
<p>I think of basic mixin props as a collection of <a href="#5.-partial-props">partial props</a> placed on shorthands (<code>background-image</code>, <code>border</code>, <code>border-image</code>, <code>mask-image</code>, etc) . This makes the partial props like params into a greater &quot;mixin&quot; prop, function thing.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">*</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --input-1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --input-2</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--blue-5)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --border-mixin</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--input-1) solid </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--input-2)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>Usage of basic mixin props</strong> looks like:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">border</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--border-mixin)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">.card.variant</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --input-2</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--purple-5)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><a href="https://www.oddbird.net/authors/miriam/">Mia</a> adds a nice hook feature by setting &quot;required&quot; prop parameters to <code>initial</code>. Then, any element that specifies this required prop, triggers the mixin to be valid, applying its effect.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">*</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* define the mixin with a required parameter */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --stripes</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">linear-gradient</span><span style="color: var(--shiki-token-constant)">(</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--stripes-angle)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    powderblue 20</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    pink 20</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 40</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    white 40</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 60</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    pink 60</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 80</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    powderblue 80</span><span style="color: var(--shiki-token-keyword)">%</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">  )</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* reset the required parameter on each element */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --stripes-angle</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">initial</span><span style="color: var(--shiki-color-text)">;  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* apply the results everywhere */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* (will only display when a valid angle is given) */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-image</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--stripes)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>Usage of mixin props</strong> looks like:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.stripes</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* providing a valid angle causes the &quot;mixin&quot; to work */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --stripes-angle</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">to bottom right</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><a href="https://codepen.io/smashingmag/pen/ZdXMJx">Snippet source</a></p>

        <h2>
          7. swap props
          <a name="7.-swap-props" href="#7.-swap-props">#</a>
        </h2>
       <p>These props <strong>flip n&#39; flop so other props can swap</strong>. Hehe, a simple example is a bool prop:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.house-button</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_hover</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &amp;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-constant)">hover {</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    --_hover: 1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>How can I use this? Ask <a href="https://jhey.dev/">Jhey</a>, he&#39;s got plenty-o-demo&#39;s with bool swappin props. Like <a href="https://codepen.io/jh3y/pen/NWBdbRP">this one</a> which includes the swap prop <code>--active</code>:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">a</span><span style="color: var(--shiki-color-text)">:is(</span><span style="color: var(--shiki-token-function)">:hover</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">:focus</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --active</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">:is(</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">.char</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    </span><span style="color: var(--shiki-token-function)">rotate</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">calc</span><span style="color: var(--shiki-token-constant)">((</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--active</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> 0) </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--r</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> 0)) * 1</span><span style="color: var(--shiki-token-keyword)">deg</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">translate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">calc</span><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">var</span><span style="color: var(--shiki-color-text)">(--active, 0) * </span><span style="color: var(--shiki-token-constant)">var</span><span style="color: var(--shiki-color-text)">(--x, 0)) * 1%),</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">calc</span><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">var</span><span style="color: var(--shiki-color-text)">(--active, 0) * </span><span style="color: var(--shiki-token-constant)">var</span><span style="color: var(--shiki-color-text)">(--y, 0)) * 1%)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>This one only transforms if <code>--active</code> is 1, because otherwise the 0 causes the math to be 0 degrees. Swappin props between 0 and 1, ugh, power.</p>
<p>He goes further in this <a href="https://codepen.io/jh3y/pen/poLBvgO">light/dark theme demo switch</a>, pivoting a color scheme and animations. Rad stuff.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/poLBvgO?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/poLBvgO">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
<p>And you can&#39;t miss <a href="https://twitter.com/anatudor">Ana Tudor</a>&#39;s post on <a href="https://css-tricks.com/dry-switching-with-css-variables-the-difference-of-one-declaration/">Dry Switching with CSS Variables</a>. This was the first place I ever saw props used as bools to pivot behavior and UI.</p>
<p>There&#39;s also <a href="https://mobile.twitter.com/jane0ri">Jane Ori</a> who&#39;s made many games and intense systems out of Dry Switching / swappy props: <a href="https://github.com/propjockey/css-sweeper">CSS Sweeper</a>, <a href="https://github.com/propjockey/css-conways-game-of-life">CSS Conways Game of Life</a>, and <a href="https://github.com/propjockey">more</a>. They&#39;ve even got this wild library called <a href="https://github.com/propjockey/css-media-vars">CSS Media Vars</a> which enable responsive design with named breakpoints and props, it&#39;s very cool.  </p>
<p>Also, there&#39;s a sweet <a href="https://postcss.org/">PostCSS</a> plugin from <a href="https://github.com/csstools">@CSStools</a> called <a href="https://www.npmjs.com/package/@csstools/postcss-conditional-values">conditional values</a> that gives some syntactic sugar to this:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.fancy-container</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --is-fancy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">.block</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">csstools-if(--is-fancy pink else red</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">/* becomes */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --is-fancy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)">  ;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">.fancy-container</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --is-fancy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">initial</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">.block</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --is-fancy--0</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--is-fancy) red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--is-fancy--0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)">pink)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>

        <h2>
          8. style query props
          <a name="8.-style-query-props" href="#8.-style-query-props">#</a>
        </h2>
       <p><strong>Container query props!</strong> Could be used as enums for theming, state machines, you name it. </p>
<p>Here&#39;s the gist:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-constant)">container</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">(--vibe</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">primary</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --_bg</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--indigo-5)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --_border</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--indigo-4)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">@container</span><span style="color: var(--shiki-color-text)"> style(--vibe: rad) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --_bg: var(--gradient-11);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    border: none;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">@container</span><span style="color: var(--shiki-color-text)"> style(--size: large) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">font-size</span><span style="color: var(--shiki-color-text)">: var(--font-size-4);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><a href="https://codepen.io/argyleink/pen/ZEjoaOv">Try this</a> snippet in <a href="https://www.google.com/chrome/canary/">Canary</a> on Codepen!</p>
<p><a href="https://www.matuzo.at/about-me/">Manuel Matuzoviƒá</a> has been writing about it with a post on how <a href="https://www.matuzo.at/blog/2023/100daysof-day83/">style queries work on computed custom property values</a> and how using <a href="https://www.matuzo.at/blog/2023/100daysof-day85/">@property can help with style queries</a>.</p>

        <h2>
          9. meta lang props
          <a name="9.-meta-lang-props" href="#9.-meta-lang-props">#</a>
        </h2>
       <p><strong>Make your own CSS API</strong>, in CSS! Mixins are the primary key but other strategies from this post are helpful.</p>
<p>Me using a quick one we&#39;ll make:</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.button</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --bg</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --text-color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">white</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Setting up this means setting the actual css property <code>color</code> with your new name for it <code>text</code>.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">*</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--bg)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>There, you just created an interface into an interface. These custom properties pass through to the actual CSS property.</p>
<p>So, that was a pretty tame example. Here&#39;s one where I&#39;m adding a new property that matches both padding and gaps.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">*</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gapadding)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">gap</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gapadding)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">.card</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --gapadding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-keyword)">rem</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Here&#39;s a wild example! It&#39;s not real, but I&#39;m pretty sure this could all be setup.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.button</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3d-primary</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_accent</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--neon-purple)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_accent-hover</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--neon-pink)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_3d-depth-level</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_particles</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">20</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>

        <h2>
          10. typed props
          <a name="10.-typed-props" href="#10.-typed-props">#</a>
        </h2>
       <p><a href="https://web.dev/at-property/"><code>@property</code></a> is another really cool custom property category of usage. These provide <strong>type safety</strong> and can <strong>assist browsers in knowing your animation</strong> intents.</p>
<pre><code class="language-css"><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@property</span><span style="color: var(--shiki-color-text)"> --focal-size {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax: &#39;&lt;</span><span style="color: var(--shiki-token-string-expression)">length-percentage</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">initial-value</span><span style="color: var(--shiki-color-text)">: 100%;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits: false;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>That definition of <code>--focal-size</code> is enough to teach some browsers how to animate a gradient used into a mask. Hold alt/opt inside the codepen below, it&#39;ll transition if you are in a browser with <code>@property</code>.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/rNwWwor?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/rNwWwor">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>

        <h2>
          Conclusion
          <a name="conclusion" href="#conclusion">#</a>
        </h2>
       <p>Between mixins, <code>@property</code>, scoping tricks, and style queries‚Ä¶ There still a lot of unexplored territory here and tons of power üòâ</p>
<p><strong>Did I miss a category‚ÄΩ</strong></p>
]]></description>
            <link>https://nerdy.dev/custom-prop-categories?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/custom-prop-categories?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 26 Jan 2023 18:40:29 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-prop-categories.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-prop-categories.png"/>
        </item>
        <item>
            <title><![CDATA[A Scrollend Event]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/https://wd.imgix.net/image/vS06HQ1YTsbMKSFTIPl2iogUQP73/TuLoDVklwlps4Akyo9TN.jpg?auto=format&w=1600" alt="END is written on the pavement of a street." height="480"  width="960" />
        <p>Delete your timeout functions and shake off their bugs, here&#39;s the event you really need: <code>scrollend</code>.  </p>
<p>Read all about it on <a href="https://developer.chrome.com/blog/scrollend-a-new-javascript-event/">Chrome Developers</a> and checkout the polyfill I wrote on <a href="https://www.npmjs.com/package/scrollyfills">NPM</a>.</p>
]]></description>
            <link>https://nerdy.dev/a-scrollend-event?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/a-scrollend-event?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[js]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Wed, 25 Jan 2023 20:22:40 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/https://wd.imgix.net/image/vS06HQ1YTsbMKSFTIPl2iogUQP73/TuLoDVklwlps4Akyo9TN.jpg?auto=format&amp;w=1600" length="0" type="false"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/https://wd.imgix.net/image/vS06HQ1YTsbMKSFTIPl2iogUQP73/TuLoDVklwlps4Akyo9TN.jpg?auto=format&amp;w=1600"/>
        </item>
        <item>
            <title><![CDATA[Mc At Css Day 2023]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-day-2023-mc.jpg" alt="Screenshot from the CSS Day 2023 website" height="770"  width="2252" />
        <p><strong>Proud to share</strong> I&#39;ll be MCing <a href="https://cssday.nl/2023">CSS Day 2023</a> with <a href="https://css-irl.info">Michelle Barker</a>.</p>
]]></description>
            <link>https://nerdy.dev/mc-at-css-day-2023?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/mc-at-css-day-2023?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Thu, 19 Jan 2023 17:20:56 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-day-2023-mc.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-day-2023-mc.jpg"/>
        </item>
        <item>
            <title><![CDATA[A CSS logo‚ÄΩ]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-logo.png" alt="Two logos, they're 3 sides of a box. One logo, each side is a letter, with C as the top face. The other repeats CSS 3 times per side." height="263"  width="617" />
        <p>A not so serious pair of logos about CSS. Randomly created, but the final &quot;thing&quot; is definitely working in some ways. I think?</p>
<p><strong>Fun attributes:</strong></p>
<ul>
<li>playful use of boxes</li>
<li>uses the system font (def looks different on my machine üòâ)</li>
<li>light / dark theme adaptive</li>
<li>resize adaptive</li>
<li>position in CSS 3D perspective</li>
<li>no position absolute</li>
</ul>
<p><strong>Regrts:</strong></p>
<ul>
<li>not loading a font?</li>
<li>trying harder to use <code>skew()</code></li>
<li>no accessibility testing</li>
<li>not using container queries somehow</li>
<li>sticking to system colors</li>
</ul>

        <h3>
          Dramatic glowy
          <a name="dramatic-glowy" href="#dramatic-glowy">#</a>
        </h3>
       <p>Neat-ish. Take away the glow and it still stands.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/jOpMRGE?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/jOpMRGE">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>

        <h3>
          Cube marquee
          <a name="cube-marquee" href="#cube-marquee">#</a>
        </h3>
       <p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/PoBGgJV?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/PoBGgJV">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>

        <h2>
          Where did these come from?
          <a name="where-did-these-come-from?" href="#where-did-these-come-from?">#</a>
        </h2>
       <p>I saw a brand do something similar with different letters, and I imagined CSS could do something really similar, but its way. <strong>CSS is about making boxes</strong>, a CSS logo could make a box. </p>
<p>Then I wanted it to be adaptive to color, resize, more‚Ä¶ and well its been fun, but I kinda wanna pass the torch. See what some forks can do? :wink wink: </p>
<p><strong>STEAL THIS!</strong> Use this wherever you want; no restrictions.</p>
<p>There&#39;s some neat opportunities for 3D rotating on the <code>transform</code> of <code>.cube</code>; accelerometer or mouse position much?</p>
<p>Does CSS need a new big 4 instead? üòâ</p>
]]></description>
            <link>https://nerdy.dev/a-css-logo-thing?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/a-css-logo-thing?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Wed, 18 Jan 2023 05:42:51 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-logo.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-logo.png"/>
        </item>
        <item>
            <title><![CDATA[Service Worker Updated With Workbox]]></title>
            <description><![CDATA[<p>Service worker update:</p>
<ul>
<li><a href="https://developer.chrome.com/docs/workbox/">Workbox</a> added</li>
<li>Offline pages (as you visit them)</li>
<li>Caches images (as you download them)</li>
</ul>
<p>Let me know if anything has broken!</p>
]]></description>
            <link>https://nerdy.dev/service-worker-updated-with-workbox?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/service-worker-updated-with-workbox?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <dc:creator><![CDATA[Web Master@admin]]></dc:creator>
            <pubDate>Sun, 15 Jan 2023 16:29:15 GMT</pubDate>
        </item>
    </channel>
</rss>