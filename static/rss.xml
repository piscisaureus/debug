<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title><![CDATA[Adam Argyle]]></title>
        <description><![CDATA[RSS Feed for Adam Argyle: Web design & development tips & tricks: CSS, JS, HTML, Design, & UX.]]></description>
        <link>https://nerdy.dev</link>
        <image>
            <url>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</url>
            <title>Adam Argyle</title>
            <link>https://nerdy.dev</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 07 Dec 2023 18:54:33 GMT</lastBuildDate>
        <atom:link href="https://nerdy.dev/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[2023 Adam Argyle]]></copyright>
        <language><![CDATA[en]]></language>
        <webMaster><![CDATA[adam.is@nerdy.dev (Adam Argyle)]]></webMaster>
        <ttl>60</ttl>
        <category><![CDATA[CSS]]></category>
        <category><![CDATA[HTML]]></category>
        <category><![CDATA[JavaScript]]></category>
        <category><![CDATA[Front-End]]></category>
        <category><![CDATA[Design]]></category>
        <icon>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</icon>
        <logo>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/skull-card.png</logo>
        <item>
            <title><![CDATA[Neat Bouncy Focus Effect With Linear And Box Shadow]]></title>
            <description><![CDATA[
          <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bouncy-focus.mp4" alt="Two buttons shown with a bouncy click and keyboard interaction" height="522"  width="926" />
        <p>Thought this focus / interaction effect turned out nice; maybe you&#39;ll like it and make use of it too.</p>
<p><a href="https://codepen.io/argyleink/pen/XWOOydB">https://codepen.io/argyleink/pen/XWOOydB</a></p>
]]></description>
            <link>https://nerdy.dev/neat-bouncy-focus-effect-with-linear-and-box-shadow?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/neat-bouncy-focus-effect-with-linear-and-box-shadow?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 07 Dec 2023 18:51:55 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bouncy-focus.mp4" length="0" type="video/mp4"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bouncy-focus.mp4"/>
        </item>
        <item>
            <title><![CDATA[Open Props in Next with StyleX]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/next-stylex-op.png" alt="Next logo, StyleX logo, Open Props logo" height="369"  width="1440" />
        <p><a href="https://stylexjs.com">StyleX</a> outsourced tokens to <a href="https://open-props.style">Open Props</a>, so a new <a href="https://react.dev/">React</a> app with StyleX, Open Props and <a href="https://nextjs.org/">NextJS</a> is pretty quick to setup. Let&#39;s dive in and get y&#39;all started.</p>

        <h2>
          Spin up a new Next app
          <a name="spin-up-a-new-next-app" href="#spin-up-a-new-next-app">#</a>
        </h2>
       <p>We&#39;re starting from scratch, so let&#39;s use <code>create-next-app</code> in directory of your choosing:</p>
<pre><code class="language-shell"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">npx </span><span style="color: var(--shiki-token-string)">create-next-app@latest</span></span></code></pre>
</code></pre>
<p>I chose <strong>yes</strong> to TypeScript, ESLint and App Router; <strong>no</strong> to Tailwind CSS, <code>src/</code> directory, amd <code>import alias</code>. </p>
<p>You do you though.</p>
<p><code>cd</code> into the newly created Next app.</p>

        <h2>
          Install StyleX
          <a name="install-stylex" href="#install-stylex">#</a>
        </h2>
       <p>We need to add a few dependencies to the base Next app to get StyleX up and running:</p>
<pre><code class="language-shell"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">npm </span><span style="color: var(--shiki-token-string)">i</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@stylexjs/stylex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@stylexjs/open-props</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@stylexjs/babel-plugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">@stylexjs/nextjs-plugin</span></span></code></pre>
</code></pre>
<ol>
<li><code>@stylexjs/stylex</code> is the new React styling freshness</li>
<li><code>@stylexjs/open-props</code> is the prepackaged and typed Open Props tokens for use with StyleX</li>
<li><code>@stylexjs/babel-plugin</code> for use with <code>.babelrc.js</code></li>
<li><code>@stylexjs/nextjs-plugin</code> for use with Next to know about the custom Babel configuration</li>
</ol>

        <h2>
          Add a .babelrc.js file
          <a name="add-a-.babelrc.js-file" href="#add-a-.babelrc.js-file">#</a>
        </h2>
       <p>Make a new file at the root of your Next app and fill it with this configuration:</p>
<pre><code class="language-js"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  presets</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;next/babel&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;@stylexjs/babel-plugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        dev</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">NODE_ENV</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;development&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        runtimeInjection</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        genConditionalClasses</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        treeshakeCompensation</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        unstable_moduleResolution</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;commonJS&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          rootDir</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> __dirname</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">};</span></span></code></pre>
</code></pre>
<p>Notice one of the dependencies we installed is in there <code>@stylexjs/babel-plugin</code>.</p>

        <h2>
          Add to next.config.js
          <a name="add-to-next.config.js" href="#add-to-next.config.js">#</a>
        </h2>
       <p>Tell Next about StyleX via the provided Next plugin <code>@stylexjs/nextjs-plugin</code>:</p>
<pre><code class="language-js"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/** </span><span style="color: var(--shiki-token-keyword)">@type</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">{import(&#39;next&#39;).NextConfig}</span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stylexPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;@stylexjs/nextjs-plugin&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nextConfig</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  pageExtensions</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;js&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;jsx&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;ts&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;tsx&quot;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stylexPlugin</span><span style="color: var(--shiki-color-text)">({</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  rootDir</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> __dirname</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">})(nextConfig);</span></span></code></pre>
</code></pre>

        <h2>
          Patch a next/font issue
          <a name="patch-a-next/font-issue" href="#patch-a-next/font-issue">#</a>
        </h2>
       <p>The Babel file we added conflicts with Next and the included font strategy. I removed these references from the project, a problem to be solved at another time perhaps.</p>
<p>In <code>app/layout.tsx</code>, <strong>remove</strong> the following references to the font strategy:</p>
<ol>
<li><code>import { Inter } from &#39;next/font/google&#39;</code></li>
<li><code>const inter = Inter({ subsets: [&#39;latin&#39;] })</code></li>
<li><code>className={inter.className}</code></li>
</ol>
<p>With those removed, <code>npm run dev</code> is free to compile and be loaded at <code>localhost:3000</code>.</p>

        <h2>
          Bring in StyleX and Open Props
          <a name="bring-in-stylex-and-open-props" href="#bring-in-stylex-and-open-props">#</a>
        </h2>
       <p>Lastly, let&#39;s write some StyleX and use Open Props for values. Open <code>app/page.tsx</code> and add the following to the top of the file:</p>
<pre><code class="language-js"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> stylex </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@stylexjs/stylex&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { colors } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@stylexjs/open-props/lib/colors.stylex&quot;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>
</code></pre>
<p>Now we have <code>stylex</code> and it&#39;s API for creating styles for this component and <code>colors</code> from <a href="https://open-props.style/#colors">Open Props</a> have been imported which hold all the color tokens.</p>
<p><q>Enjoy the autocomplete from TypeScript if you have it.</q></p>
<p>Next, we finally get to create some StyleX styles:</p>
<pre><code class="language-js"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">X</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stylex</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">({</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  test</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">colors</span><span style="color: var(--shiki-color-text)">.red5</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">});</span></span></code></pre>
</code></pre>
<p>I used <code>const X</code> here since Next has already created a <code>styles</code> variable from CSS modules. This is changeable later, after all the CSS modules have been replaced with StyleX. I also used the classic CSS debugging color <code>red</code> as a text color so we can easily see if things have worked. </p>
<p>Test your changes by providing the classname returned by StyleX onto an element in the <code>Home()</code> function:</p>
<pre><code class="language-js"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">main</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-constant)">styles</span><span style="color: var(--shiki-color-text)">.main</span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-token-function)">stylex</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">X</span><span style="color: var(--shiki-color-text)">.test)}&gt;</span></span></code></pre>
</code></pre>
<p>Save and check your next app to see all the text has gone red. Success.</p>

        <h2>
          More props
          <a name="more-props" href="#more-props">#</a>
        </h2>
       <p>For a full list of the importable Open Props from the StyleX package, <a href="https://github.com/facebook/stylex/blob/main/packages/open-props/package.json#L6-L25">check it out on Github</a>. </p>
<p>I&#39;ll share a prettier version of the list here, to save you from bouncing and reading a <code>package.json</code>:</p>
<pre><code class="language-shell"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">animations</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">animationNames</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">aspects</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">borders</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">colors</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">colorsHSL</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">colorsOKLCH</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">colorsOKLCHHues</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">grayOKLCH</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">easings</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">fonts</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">gradients</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">highlights</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">layouts</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">masksCornerCuts</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">masksEdges</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">shadows</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">sizes</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">svg</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">zIndex</span></span></code></pre>
</code></pre>
<p>Since we removed the Next app font, let&#39;s fix that by using what Open Props provides:</p>
<pre><code class="language-js"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { fonts } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;@stylexjs/open-props/lib/fonts.stylex&quot;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>
</code></pre>
<p>With the font tokens loaded, we can use the <code>fonts.sans</code> token to bring in a system ui font string:</p>
<pre><code class="language-js"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">X</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stylex</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">({</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  test</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">colors</span><span style="color: var(--shiki-color-text)">.red5</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    fontFamily</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fonts</span><span style="color: var(--shiki-color-text)">.sans</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">});</span></span></code></pre>
</code></pre>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,c_limit,q_auto,w_auto/argyleink/stylex-next-result.png" 
            alt="" 
            title="A NextJS app homepage with red text and a sans serif font " 
            decoding="async"
            width="1213" 
            height="602"
          /></p>
<p>At this point, you&#39;re off to the races with StyleX and <a href="https://stylexjs.com/docs/learn/styling-ui/using-styles/">their docs will help you continue styling</a>, theming and extending your design system. You can delete the <code>test</code> style object and begin more finite control with the StyleX API.</p>

        <h2>
          Outro
          <a name="outro" href="#outro">#</a>
        </h2>
       <p><a href="https://stackblitz.com/edit/next-stylex-openprops?file=app%2Fpage.tsx">Here&#39;s a StackBlitz</a> with all this already setup in a new NextJS project, for reference or forking.</p>
]]></description>
            <link>https://nerdy.dev/using-open-props-with-nextjs-and-the-brand-new-react-style-library-stylex?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/using-open-props-with-nextjs-and-the-brand-new-react-style-library-stylex?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[js]]></category>
            <dc:creator><![CDATA[Web Master@admin]]></dc:creator>
            <pubDate>Wed, 06 Dec 2023 23:24:00 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/next-stylex-op.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/next-stylex-op.png"/>
        </item>
        <item>
            <title><![CDATA[One Atom Of Time In CSS]]></title>
            <description><![CDATA[<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">--atom: 0.15957s;</span></span></code></pre>
</code></pre>
<p>via <a href="https://github.com/argyleink/open-props/blob/main/src/extra/durations.css">Open Props</a></p>
]]></description>
            <link>https://nerdy.dev/one-atom-of-time-in-css?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/one-atom-of-time-in-css?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 30 Nov 2023 05:23:09 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Percentage Chroma]]></title>
            <description><![CDATA[<p>I learned <strong>you can use <code>%</code> for chroma</strong>!</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.percentage-chroma</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">lch</span><span style="color: var(--shiki-token-constant)">(50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 200)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 200</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Added 2 examples to my <a href="https://codepen.io/argyleink/pen/RwyOyeq">CSS Color Syntax Mega List</a>.  </p>
]]></description>
            <link>https://nerdy.dev/percentage-chroma?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/percentage-chroma?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Mon, 27 Nov 2023 22:19:33 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Thinking On Ways To Style Checkbox And Radio Groups]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gui-picklists.jpg" alt="GUI Challenges avatar is next to a piece of CSS code and the title Picklists" height="720"  width="1280" />
        <p><a href="https://www.youtube.com/watch?v=d2O-8n-UnrI&list=PLNYkxOF6rcIAaV1wwI9540OC_3XoIzMjQ">Thinking on ways to solve <strong>Picklists</strong></a></p>
<p>In this <a href="https://goo.gle/GUIchallenges">GUI Challenge</a>, 
<a href="https://www.youtube.com/channel/UCBGr3ZMcV5jke40_Wrv3fNA">I</a> show how to use leverage the <strong>power of checkbox and radio groups</strong> for beautiful and accessible picking UX.</p>
<p><a href="https://gui-challenges.web.app/picklists/dist/">demo</a> · 
<a href="https://github.com/argyleink/gui-challenges">source</a></p>
]]></description>
            <link>https://nerdy.dev/thinking-on-ways-to-style-checkbox-and-radio-groups?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/thinking-on-ways-to-style-checkbox-and-radio-groups?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[media]]></category>
            <dc:creator><![CDATA[Adam@GUIchallenges]]></dc:creator>
            <pubDate>Tue, 21 Nov 2023 17:11:58 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gui-picklists.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gui-picklists.jpg"/>
        </item>
        <item>
            <title><![CDATA[Jason Lengstorf Is Bad At CSS Too]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/jason-lengstorf-bad-at-css.png" alt="What CSS is Jason Lengstorf bad at?" height="458"  width="1088" />
        <p>🎙️ <strong>Bad At CSS Podcast</strong>  </p>
<p><a href="https://jason.energy/posts/">Jason Lengstorf</a>, <a href="https://twitter.com/_davideast">David East</a> and I chaotically discuss CSS, container queries, and that pesky <code>clamp()</code> function 🖕.</p>
<p>Subscribe, listen or watch<br>
<a href="https://open.spotify.com/episode/5k8sEqKp3mXAWwhepgyjqR">Spotify</a> · 
<a href="https://podcasts.apple.com/us/podcast/what-css-is-jason-lengstorf-bad-at/id1702605487?i=1000635425578">Apple</a> · 
<a href="https://www.youtube.com/watch?v=BYaU3ftTXfQ">YouTube</a></p>
]]></description>
            <link>https://nerdy.dev/jason-lengstorf-is-bad-at-CSS-too?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/jason-lengstorf-is-bad-at-CSS-too?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[media]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Mon, 20 Nov 2023 18:18:25 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/jason-lengstorf-bad-at-css.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/jason-lengstorf-bad-at-css.png"/>
        </item>
        <item>
            <title><![CDATA[Custom range input progress fill]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/range-with-view-timeline.png" alt="A slider input half filled with a vibrant gradient." height="356"  width="1930" />
        <p>Roman Komarov forked a demo of mine the other day and showed how CSS <a href="https://scroll-driven-animations.style">scroll driven animation</a> could map the <code>input[type=range]</code> slider&#39;s thumb pseudo element position and use it to power a percentage in a gradient mask. </p>
<p>Roman explains it all very well <a href="https://blog.kizu.dev/input-range-thumb/">here on their blog</a>.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/RwvLBqM?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/RwvLBqM">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
<p>It&#39;s <strong>super rad</strong>. And totally triggered 2 ideas…</p>

        <h2>
          FORK THE FORK!!!
          <a name="fork-the-fork!!!" href="#fork-the-fork!!!">#</a>
        </h2>
       <p>The first idea I was able to finish tonight, and the 2nd I&#39;ll do sometime soon. <em>Ssssecretssss</em></p>
<p>Here&#39;s my fork of their fork, repurposed their mapping to power the fill of a range slider. A task that&#39;s not so easy.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/vYbpNVm?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/vYbpNVm">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
<p>I left a good chunk of comments in there!</p>
<p>While this may not have great support at the moment, and is quite a little web of CSS to setup… it&#39;s a very promising path forward for styling <code>input[type=range]</code> and <strong>other components with moveable parts</strong>. </p>
<p>I&#39;ll be stashing this into my CSS tricks 🪦</p>
]]></description>
            <link>https://nerdy.dev/add-a-rad-gradient-progress-fill-to-a-range-input-with-no-JS?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/add-a-rad-gradient-progress-fill-to-a-range-input-with-no-JS?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Fri, 17 Nov 2023 06:26:56 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/range-with-view-timeline.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/range-with-view-timeline.png"/>
        </item>
        <item>
            <title><![CDATA[Compare Stuff With This Minimal Setup]]></title>
            <description><![CDATA[
          <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/compare.mp4" alt="some title" height="1440"  width="1920" />
        <p><a href="https://codepen.io/argyleink/pen/XWOaazZ">Steal this minimal code setup</a> for a nice comparison component.</p>
]]></description>
            <link>https://nerdy.dev/compare-stuff-with-this-minimal-setup?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/compare-stuff-with-this-minimal-setup?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Mon, 13 Nov 2023 23:50:51 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/compare.mp4" length="0" type="video/mp4"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/compare.mp4"/>
        </item>
        <item>
            <title><![CDATA[Gradient Glowing Text Effect]]></title>
            <description><![CDATA[
          <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gradient-glowing-text.mp4" alt="a rotating preview of the glowing gradient text in a few color combinations" height="1080"  width="1920" />
        <p><a href="https://codepen.io/argyleink/pen/abXvVME">View source</a></p>
]]></description>
            <link>https://nerdy.dev/gradient-glowing-text-effect?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/gradient-glowing-text-effect?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 26 Oct 2023 20:33:14 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gradient-glowing-text.mp4" length="0" type="video/mp4"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/gradient-glowing-text.mp4"/>
        </item>
        <item>
            <title><![CDATA[CSS Prefers Reduced Transparency]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/prefers-reduced-transparency-2.png" alt="a comparison is shown between a transparent blurry white card design with white text next to a reduced transparency equivalent that is dark and nearly opaque" height="1018"  width="2202" />
        <p>I wrote about <a href="https://developer.chrome.com/blog/css-prefers-reduced-transparency/">CSS prefers-reduced-transparency</a> on <a href="https://developer.chrome.com/">developer.chrome.com</a> 🤓</p>
]]></description>
            <link>https://nerdy.dev/css-prefers-reduced-transparency?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/css-prefers-reduced-transparency?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Wed, 25 Oct 2023 19:31:30 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/prefers-reduced-transparency-2.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/prefers-reduced-transparency-2.png"/>
        </item>
    </channel>
</rss>