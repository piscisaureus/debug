<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title><![CDATA[Adam Argyle]]></title>
        <description><![CDATA[RSS Feed for Adam Argyle: Web design & development tips & tricks: CSS, JS, HTML, Design, & UX.]]></description>
        <link>https://nerdy.dev</link>
        <image>
            <url>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</url>
            <title>Adam Argyle</title>
            <link>https://nerdy.dev</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 21 Feb 2023 04:42:56 GMT</lastBuildDate>
        <atom:link href="https://nerdy.dev/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[2023 Adam Argyle]]></copyright>
        <language><![CDATA[en]]></language>
        <webMaster><![CDATA[adam.is@nerdy.dev (Adam Argyle)]]></webMaster>
        <ttl>60</ttl>
        <category><![CDATA[CSS]]></category>
        <category><![CDATA[HTML]]></category>
        <category><![CDATA[JavaScript]]></category>
        <category><![CDATA[Front-End]]></category>
        <category><![CDATA[Design]]></category>
        <icon>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</icon>
        <logo>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/skull-card.png</logo>
        <item>
            <title><![CDATA[Out To Nature 2023]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/tennessee-2023.jpg" alt="some title" height="1280"  width="1920" />
        <p>afk.</p>
]]></description>
            <link>https://nerdy.dev/out-to-nature-2023?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/out-to-nature-2023?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[media]]></category>
            <dc:creator><![CDATA[Web Master@admin]]></dc:creator>
            <pubDate>Tue, 21 Feb 2023 04:40:05 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/tennessee-2023.jpg" length="0" type="image/jpeg"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/tennessee-2023.jpg"/>
        </item>
        <item>
            <title><![CDATA[Conic gradient Android spinner]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/conic-spinner-hero-bg.png" alt="Abstract spinner image with many in inbetween states" height="480"  width="1280" />
        <p>Last week I shared a <a href="/gradient-outline-circular-chart">circular chart effect</a> using a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient">conic gradient</a> and a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient">radial gradient</a> mask. Then I saw this:</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,q_auto/argyleink/android-spotify-spinner.mp4 
            width="1004" 
            height="558"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/android-spotify-spinner.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p>We can <strong>use the same work from the chart</strong> to make this spinner, see!</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,q_auto/argyleink/android-spinner.mp4 
            width="300" 
            height="300"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/android-spinner.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>

        <h2>
          Gradient changes
          <a name="gradient-changes" href="#gradient-changes">#</a>
        </h2>
       <p>Only a few lines of code need changed to mimmick the Spotify spinner with <a href="/gradient-outline-circular-chart">the previous work</a>.</p>
<p>The conic gradient <em>used to be</em> pink to cyan (up to the angle), then transparent after that:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">#pie</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-image</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">conic-gradient</span><span style="color: var(--shiki-token-constant)">(deeppink</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> cyan </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--ng)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> #0000 0)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>The spinner doesn&#39;t need the gradient, so we can go with one less color. Also, the transparency needs to be first, and end with white, so reverse the order of the color stops.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">#spinner</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-image</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">conic-gradient</span><span style="color: var(--shiki-token-constant)">(#0000 270</span><span style="color: var(--shiki-token-keyword)">deg</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> white 0)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,c_limit,q_auto,w_auto/argyleink/quarter-turn-conic.png" 
            alt="" 
            title="One quarter of a conic gradient is shown " 
            decoding="async"
            width="1282" 
            height="436"
          /></p>

        <h2>
          Adding animation
          <a name="adding-animation" href="#adding-animation">#</a>
        </h2>
       <p>Here&#39;s my favorite way to make an infinite rotation animation in CSS:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@keyframes</span><span style="color: var(--shiki-color-text)"> rotate {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  to {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">rotate</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-keyword)">turn</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>With those keyframes we can create an infinite animation:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;https://unpkg.com/open-props/easings.min.css&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">#spinner</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">animation</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rotate .8</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--ease-out-4) infinite</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,q_auto/argyleink/android-spinner.mp4 
            width="300" 
            height="300"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/android-spinner.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p>The Open Props <a href="https://open-props.style/#easing">easings</a> were clutch in the effect. Notice how sharp that ease out is, that&#39;s definitely custom. With <a href="https://open-props.style/">Open Props</a> I was able to try on a few of the more extreme ease-out props until I found one that matches what I saw on Android. </p>
<q class="info">
  ICYMI; Open Props has 5 variants for each of the standard easings in CSS. For example, ease-out-1 is the most subtle ease out, while ease-out-5 is dramatic.
</q>

<p><strong>That&#39;s it!</strong> 🤓</p>

        <h2>
          Try it
          <a name="try-it" href="#try-it">#</a>
        </h2>
       <p>Here&#39;s <a href="https://codepen.io/argyleink/pen/qBMEYbP">the Codepen</a> for you to try it out and see it for yourself.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/qBMEYbP?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/qBMEYbP">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
]]></description>
            <link>https://nerdy.dev/android-spinner-conic-gradient-animation?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/android-spinner-conic-gradient-animation?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Sun, 19 Feb 2023 05:03:10 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/conic-spinner-hero-bg.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/conic-spinner-hero-bg.png"/>
        </item>
        <item>
            <title><![CDATA[Turned 37]]></title>
            <description><![CDATA[<p>37 today. Maybe I&#39;ll upgrade this 2011 Mac Air.</p>
]]></description>
            <link>https://nerdy.dev/turned-37?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/turned-37?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <dc:creator><![CDATA[Dad@pops]]></dc:creator>
            <pubDate>Fri, 17 Feb 2023 16:20:56 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Cascade Layer Async Overrides]]></title>
            <description><![CDATA[<p>This felt like a future of library customization, using <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@layer"><code>@layer</code></a>:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* &lt;tool-tip&gt; styles */</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;tool-tip.css&quot;</span><span style="color: var(--shiki-color-text)"> layer(components.tooltip);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">/* later, in some-new-context.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@layer</span><span style="color: var(--shiki-color-text)"> components.tooltip {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.some-new-context</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">tool-tip</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --_bg</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--surface-1)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --_shadow-alpha</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">15</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Scope the import, then append tweaks into that scope from anywhere. Safe and sound.</p>
<p><strong>Rad stuff.</strong></p>
]]></description>
            <link>https://nerdy.dev/cascade-layer-async-overrides?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/cascade-layer-async-overrides?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 16 Feb 2023 15:52:44 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Circular gradient stroke chart]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/conic-chart-hero.png" alt="Three example states of the chart" height="441"  width="1179" />
        <p>CSS masks and gradients are so rad, there&#39;s so much you can do with them.</p>
<p>This trick uses two gradients;</p>
<ol>
<li>a radial gradient mask, hiding the inner part of the conic</li>
<li>a conic gradient, visible up to the angle, then transparent</li>
</ol>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,q_auto/argyleink/conic-chart.mp4 
            width="492" 
            height="492"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/conic-chart.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>

        <h2>
          Let&#39;s see some code
          <a name="let&#39;s-see-some-code" href="#let&#39;s-see-some-code">#</a>
        </h2>
       <p>Start with making a square, so it&#39;s easy to make a circle.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">#pie</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">aspect-ratio</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inline-size</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-token-keyword)">vmin</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">border-radius</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Now add the mask and conic gradient. Comments are inline as to why or what each part is doing.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">#pie</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --ng</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">120</span><span style="color: var(--shiki-token-keyword)">deg</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">/* can be set via slider */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --thickness</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_inner</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">calc</span><span style="color: var(--shiki-token-constant)">(70</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--thickness))</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --_outer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">calc</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--_inner) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-token-constant)"> 1</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">/* fixes aliasing */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* hides the inner part of the conic gradient/element */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">mask</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">radial-gradient</span><span style="color: var(--shiki-token-constant)">(circle</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> #0000 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--_inner)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> #000 </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--_outer))</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* gradient up to --ng, transparent after --ng */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-image</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">conic-gradient</span><span style="color: var(--shiki-token-constant)">(deeppink</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> cyan </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--ng)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> #0000 0)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>The conic gives us the smooth gradient and the angle, while the mask and overall element shape, isolate a thin line of visibility into the conic gradient, completing the illusion.</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,q_auto/argyleink/conic-chart-devtools.mp4 
            width="1190" 
            height="668"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/conic-chart-devtools.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>

        <h2>
          Try it
          <a name="try-it" href="#try-it">#</a>
        </h2>
       <p>The Codepen hooks up a slider to the angle and some text, to help debug and control the effect.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/MWBNZbO?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/MWBNZbO">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
]]></description>
            <link>https://nerdy.dev/gradient-outline-circular-chart?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/gradient-outline-circular-chart?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Sun, 12 Feb 2023 01:02:12 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/conic-chart-hero.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/conic-chart-hero.png"/>
        </item>
        <item>
            <title><![CDATA[Night Light Dance Party]]></title>
            <description><![CDATA[
          <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/kids-party.mp4" alt="Kids sped up night bedroom dance party" height="720"  width="1280" />
        <p>Gettin the wiggles out before bedtime;<br>kids night club style.</p>
]]></description>
            <link>https://nerdy.dev/night-light-dance-party?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/night-light-dance-party?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <dc:creator><![CDATA[Dad@pops]]></dc:creator>
            <pubDate>Sat, 11 Feb 2023 23:36:33 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/kids-party.mp4" length="0" type="video/mp4"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/kids-party.mp4"/>
        </item>
        <item>
            <title><![CDATA[Another rad use for the line-height unit]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/lh-unit-half-leading.png" alt="Code snippet titled, inline padding like half leading" height="578"  width="1088" />
        <p>CSS has a unit that represents the current <code>line-height</code> of it&#39;s context. How rad is that. I&#39;ve been having fun finding use cases for this… <code>lh</code>.</p>

        <h2>
          peep it
          <a name="peep-it" href="#peep-it">#</a>
        </h2>
       <p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/ExpBYVP?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/ExpBYVP">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>

        <h2>
          the concept
          <a name="the-concept" href="#the-concept">#</a>
        </h2>
       <p>Any <code>line-height</code> value above unitless <code>1</code> will get distributed to the line box as &quot;half leading&quot;. Think of it like equal <code>block</code> spacing distribution. Well now we have <code>lh</code> for use in <code>calc()</code> and to perhaps distribute equal <code>inline</code> spacing.</p>
<p>That led me to this rad use case for a tiny tag component thingy.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.tag</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">padding-inline</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">.25lh</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Which <code>.25lh</code> was because the element already had <code>line-height</code> set to <code>1.5</code>. </p>
<p>Might as well turn it into a <code>calc()</code> because it matches the intent and makes the computer do the math, plus add the <code>line-height</code> to the demo so it&#39;s all there at a glance:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.tag</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">line-height</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.5</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">padding-inline</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">calc</span><span style="color: var(--shiki-token-constant)">(.5lh </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-token-constant)"> 2)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>And here&#39;s the developer&#39;s cut:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.tag</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* .5 extra leading */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">line-height</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.5</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* we can divvy equal spacing to the inline edges */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* complimenting extra height half leading */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* making even spacing all around */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">padding-inline</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">calc</span><span style="color: var(--shiki-token-constant)">(.5lh </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-token-constant)"> 2)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>

        <h2>
          outro
          <a name="outro" href="#outro">#</a>
        </h2>
       <p>This isn&#39;t <em>that</em> cool, but also like, <strong>I thought it was</strong> cool. </p>
]]></description>
            <link>https://nerdy.dev/another-rad-use-for-the-line-height-unit?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/another-rad-use-for-the-line-height-unit?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Thu, 09 Feb 2023 05:40:47 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/lh-unit-half-leading.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/lh-unit-half-leading.png"/>
        </item>
        <item>
            <title><![CDATA[Color Palettes And Typography]]></title>
            <description><![CDATA[<p>Math color palettes = letter spacing<br>Optical color palettes = kerning</p>
]]></description>
            <link>https://nerdy.dev/color-palettes-and-typography?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/color-palettes-and-typography?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Wed, 08 Feb 2023 15:31:18 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A color-contrast() strategy for complimentary translucent backgrounds]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/supportive-translucent-bg.png" alt="Screenshot of the final code snippet from this blog post." height="1992"  width="3699" />
        <p>The goal I had in mind was to have maximized text contrast against any color. This meant the text color should contrast well, but also I wanted a supportive translucent background to help bump that contrast even further, for situations where it may have otherwise had low contrast.</p>
<p>To do this:</p>
<ol>
<li>I find a good contrasting text color with <code>color-contrast()</code>. </li>
<li>Then I find a contrasting color for that text color with <code>color-contrast()</code>.</li>
<li>Use that text contrast color as a supportive translucent background with relative color syntax <code>oklch(from black l c h / 40%)</code></li>
</ol>
<p><strong>tldr;</strong>  </p>
<ol>
<li>If the text color is white, it&#39;s supportive background should be translucent black.</li>
<li>If the text color is black, it&#39;s supportive background should be translucent white.</li>
</ol>
<p>It&#39;s so <strong>much easier to see</strong>, but you can <a href="https://codepen.io/argyleink/pen/GRBLMoY">try it here</a>:</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,q_auto/argyleink/dynamic-contrast.mp4 
            width="1280" 
            height="960"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/dynamic-contrast.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p>See how I&#39;ve automated the text color and a supportive background on that text? I don&#39;t have to care about the color I&#39;m overlaying now, the browser handles all of it dynamically!</p>

        <h2>
          The essentials of the effect
          <a name="the-essentials-of-the-effect" href="#the-essentials-of-the-effect">#</a>
        </h2>
       <p>I use 2 future CSS features that aren&#39;t well supported yet (but are very fun to play with):</p>
<ol>
<li><code>color-contrast()</code> - <a href="https://drafts.csswg.org/css-color-6/#colorcontrast">spec</a></li>
<li>&quot;Relative color syntax&quot; - <a href="https://www.w3.org/TR/css-color-5/#relative-colors">spec</a></li>
</ol>
<p><q class="info">Safari Tech Preview is the only browser with support for relative color syntax at the time of writing this post. Chrome Canary has color-contrast() support but won&#39;t have the dynamic supportive background (see generic bg in CSS below).</q></p>
<p>First, the container background needs to be in a custom property so we can share it with other functions:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">section</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --bg</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue) 50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Then, the h1 need to put it&#39;s contrasting text color into a custom property so we can share it too:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* pick either black or white based on --bg */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">color-contrast(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--bg) vs black</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> white</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* generic semitransparent bg */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(0 0</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 0</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> / 40</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>For the cherry on top, if the browser understands relative color syntax, then create a new semi-transparent color from the contrasting color of <code>--text</code>.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* if relative color syntax is supported */</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@supports</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(from red h s l)</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* pick either black or white </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">       depending which contrasts with --text,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">       extract it and make it 40% semitransparent */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(from color-contrast(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text) vs black</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)">white</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-constant)">l</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">h</span><span style="color: var(--shiki-color-text)"> / 40%);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>All of it together:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@layer</span><span style="color: var(--shiki-color-text)"> demo {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">section</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --bg</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--hue) 50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 50</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">color-contrast(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--bg) vs black</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> white</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(0 0</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> 0</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)"> / 40</span><span style="color: var(--shiki-token-keyword)">%</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">@supports</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hsl</span><span style="color: var(--shiki-token-constant)">(from red h s l)</span><span style="color: var(--shiki-color-text)">) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oklch(from color-contrast(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--text) vs black</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)">white</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-constant)">l</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">h</span><span style="color: var(--shiki-color-text)"> / 40%);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>

        <h2>
          Conclusion
          <a name="conclusion" href="#conclusion">#</a>
        </h2>
       <p>There you have it, <strong>dynamically contrasting text with a supportive translucent background</strong>. I think that&#39;s pretty rad stuff.</p>
<p>Here&#39;s the Codepen embedded, so in the future it&#39;ll just work 🤓</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/GRBLMoY?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/GRBLMoY">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
]]></description>
            <link>https://nerdy.dev/color-from-color-contrast-result?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/color-from-color-contrast-result?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[adam@argyleink]]></dc:creator>
            <pubDate>Tue, 07 Feb 2023 18:12:13 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/supportive-translucent-bg.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/supportive-translucent-bg.png"/>
        </item>
        <item>
            <title><![CDATA[Hd Color Guide]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-hd-color.png" alt="Wizard of Oz image with Dorothy going from black and white to color." height="714"  width="1180" />
        <p><a href="https://developer.chrome.com/articles/high-definition-css-color-guide/"><strong>CSS HD Color Guide</strong></a></p>
<p>Meet the <strong>new web color spaces</strong>!</p>
<ol>
<li>What is a color gamut or color space</li>
<li>Review of the classic color spaces</li>
<li>Meet the new web color spaces</li>
<li>Migrating to HD CSS color</li>
<li>Debugging color</li>
</ol>
<p><strong>It&#39;s the article I wish I had</strong> when learning about CSS color updates.</p>
<p><a href="https://developer.chrome.com/articles/high-definition-css-color-guide/">Check it out!!</a></p>
]]></description>
            <link>https://nerdy.dev/hd-color-guide?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/hd-color-guide?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Thu, 02 Feb 2023 17:07:46 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-hd-color.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-hd-color.png"/>
        </item>
    </channel>
</rss>