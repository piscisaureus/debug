<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title><![CDATA[Adam Argyle]]></title>
        <description><![CDATA[RSS Feed for Adam Argyle: Web design & development tips & tricks: CSS, JS, HTML, Design, & UX.]]></description>
        <link>https://nerdy.dev</link>
        <image>
            <url>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</url>
            <title>Adam Argyle</title>
            <link>https://nerdy.dev</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Wed, 03 Apr 2024 04:48:34 GMT</lastBuildDate>
        <atom:link href="https://nerdy.dev/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[2024 Adam Argyle]]></copyright>
        <language><![CDATA[en]]></language>
        <webMaster><![CDATA[adam.is@nerdy.dev (Adam Argyle)]]></webMaster>
        <ttl>60</ttl>
        <category><![CDATA[CSS]]></category>
        <category><![CDATA[HTML]]></category>
        <category><![CDATA[JavaScript]]></category>
        <category><![CDATA[Front-End]]></category>
        <category><![CDATA[Design]]></category>
        <icon>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/rss-icon.png</icon>
        <logo>https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/skull-card.png</logo>
        <item>
            <title><![CDATA[A Screen Shake Web Animation]]></title>
            <description><![CDATA[
          <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/video/upload/argyleink/screenshake.mp4" alt="some title" height="1080" width="1888" />
        <p>Screen shakes are so cool in video gamesâ€¦</p>
<p><strong>Web buttons</strong> <a href="https://codepen.io/argyleink/full/xxepgOJ">can do that</a>!</p>
]]></description>
            <link>https://nerdy.dev/a-screen-shake-web-animation?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/a-screen-shake-web-animation?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[atom@argyleink]]></dc:creator>
            <pubDate>Wed, 03 Apr 2024 04:43:07 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/video/upload/argyleink/screenshake.mp4" length="0" type="video/mp4"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/screenshake.mp4"/>
        </item>
        <item>
            <title><![CDATA[Rad Border Image CSS One Liner]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/border-image-trick-1.png" alt="example with the effect on inline borders" height="642" width="1248" />
        <p>A gradient border image, transparent at the edges, looks like it thins out as it fades out.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.effect</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">border-image</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    </span><span style="color: var(--shiki-token-function)">linear-gradient</span><span style="color: var(--shiki-token-constant)">(</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      transparent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--indigo-6)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      transparent</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    ) </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    1 / 4</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-comment)">/* slice n&#39; size */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
]]></description>
            <link>https://nerdy.dev/rad-border-image-css-one-liner?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/rad-border-image-css-one-liner?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[atom@argyleink]]></dc:creator>
            <pubDate>Sun, 31 Mar 2024 02:49:33 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/border-image-trick-1.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/border-image-trick-1.png"/>
        </item>
        <item>
            <title><![CDATA[Smoothly Handling Device Rotation With View Transitions]]></title>
            <description><![CDATA[
          <video style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/video/upload/argyleink/vt-device-rotate.mp4" alt="some title" height="1440" width="1920" />
        <p>Gallery layout <strong>rotation and interaction</strong> animation with <a href="https://codepen.io/collection/GoGOGK">View Transitions</a>.</p>
<p><a href="https://codepen.io/argyleink/pen/dyLNgpX">Try it on Codepen</a></p>
]]></description>
            <link>https://nerdy.dev/smoothly-handling-device-rotation-with-view-transitions?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/smoothly-handling-device-rotation-with-view-transitions?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Tue, 19 Mar 2024 21:25:32 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/video/upload/argyleink/vt-device-rotate.mp4" length="0" type="video/mp4"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/vt-device-rotate.mp4"/>
        </item>
        <item>
            <title><![CDATA[BYO CSS tokens to Tailwind v4's new CSS centric config]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/tailwindv4-open-props-theme-config.png" alt="@import "tailwindcss"; @import "open-props/style";
@theme {
  --color-ink-1: var(--ink-1);
  --color-ink-2: var(--ink-2);
  --color-surface-1: var(--surface-1);
  --color-surface-2: var(--surface-2);
  --color-link: var(--link);
}
" height="892" width="1672" />
        <p><strong>Tailwind v4 alpha</strong> brings CSS configuration, here&#39;s a quick intro to using it. </p>
<p><a href="https://x.com/argyleink/status/1766726636811256037?s=20">Original Tweet</a></p>

        <h2>
          Basic setup
          <a name="basic-setup" href="#basic-setup">#</a>
        </h2>
       <p>I got most my information from <a href="https://tailwindcss.com/blog/tailwindcss-v4-alpha">the announcement post on Tailwindcss.com</a>, it has good pointers for getting started.</p>
<p>I chose to set up a <a href="https://remix.run/docs/en/main/future/vite">Remix app with Vite</a>. Once that&#39;s running, the new Tailwind default looks like this, a new magical <code>@theme</code> rule:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;tailwindcss&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@theme</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>

        <h2>
          BYO props
          <a name="byo-props" href="#byo-props">#</a>
        </h2>
       <p>At this point, you&#39;ll need your props in a CSS format. <a href="https://open-props.style/">Open Props</a> has always offered both JS and CSS versions of the variables, so getting them into this new config was swift.</p>
<p><q>This isn&#39;t an Open Props pitch I promise! It&#39;s much more about CSS focused prop supported as configuration values.</q></p>
<pre><code class="language-shell"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">npm </span><span style="color: var(--shiki-token-string)">i</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string)">open-props</span></span></code></pre>
</code></pre>
<p>Vite supports the alias imports, so the props import into the config looks short n sweet like this:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;tailwindcss&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;open-props/style&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@theme</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>We&#39;re ready to start mapping.</strong></p>

        <h2>
          Font Sizes
          <a name="font-sizes" href="#font-sizes">#</a>
        </h2>
       <p>Tailwind v4 alpha has proposed a simple way to opt out of <a href="https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/theme.css#L372">their defaults</a> with a swift entry into the CSS config:</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@theme</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-</span><span style="color: var(--shiki-token-string-expression)">*</span><span style="color: var(--shiki-color-text)">: initial;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Now we can add our own <code>--font-size</code> mappings and Tailwind will generate utility classes for it. </p>
<p>The rules look like naming hooks, where if the custom property name on the left has <code>--font-size</code> in it, then it will generate <a href="https://tailwindcss.com/docs/font-size">font size utilities</a>. </p>
<p>The trick is to hook into the naming while also supplying your own design tokens as values.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@theme</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-</span><span style="color: var(--shiki-token-string-expression)">*</span><span style="color: var(--shiki-color-text)">: initial;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-00: var(--font-size-00);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-0: var(--font-size-0);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-1: var(--font-size-1);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-2: var(--font-size-2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-3: var(--font-size-3);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-4: var(--font-size-4);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-5: var(--font-size-5);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-6: var(--font-size-6);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-7: var(--font-size-7);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --font-size-8: var(--font-size-8);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p>Usage:</p>
<pre><code class="language-html"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;text-5&quot;</span><span style="color: var(--shiki-color-text)">&gt;â€¦&lt;/</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>
</code></pre>
<p>This same process was easily repeatable for colors, shadows, and <a href="https://github.com/argyleink/twop/blob/main/app/tailwind.css">more</a>.</p>

        <h2>
          Gradients
          <a name="gradients" href="#gradients">#</a>
        </h2>
       <p>Going off the beaten path a bit, I followed the naming hook pattern idea and cross referenced it with the <a href="https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/theme.css">theme.css</a> published in the v4 repo; I found I could bring all of the <a href="https://open-props.style/#gradients">Open Props gradients</a> in and Tailwind makes them available via the <a href="https://tailwindcss.com/docs/background-image">background-image utilities</a>.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@theme</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --background-image-gradient-1: var(--gradient-1);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --background-image-gradient-2: var(--gradient-2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --background-image-gradient-3: var(--gradient-3);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  â€¦</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --background-image-gradient-30: var(--gradient-30);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<pre><code class="language-html"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;bg-gradient-30 dark:bg-gradient-8&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  â€¦</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>
</code></pre>
<p>Glad I went off the path. There&#39;s <strong>more to explore</strong>.</p>

        <h2>
          Adaptive utilities
          <a name="adaptive-utilities" href="#adaptive-utilities">#</a>
        </h2>
       <p>On to my favorite part, creating adaptive utililities.</p>
<p>I really like <a href="/custom-prop-categories#3.-adaptive-props">adaptive custom properties</a>, and I wanted Tailwind to generate adaptive utility classes for me.</p>
<p>Instead of:</p>
<pre><code class="language-html"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;bg-gray-2 dark:bg-gray-12&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  â€¦</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>
</code></pre>
<p>I&#39;d write:</p>
<pre><code class="language-html"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;bg-surface&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  â€¦</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>
</code></pre>
<p>It&#39;s possible, and easy to setup.</p>
<p><q class="info">I was happy to see I could configure Tailwind v4 to enable the workflow. </q></p>
<p>Utility classes are just backed by props now right? And with colors, there&#39;s a clear naming hook. So what if instead of using Open Props values inside <code>@theme</code>, I make up some new ones, then I provide values for in light and dark media queries?</p>
<p>So here&#39;s the light and dark theme: </p>
<ul>
<li>2 text &quot;ink&quot; colors</li>
<li>2 surfaces</li>
<li>a link color</li>
</ul>
<p>Tailwind sees the <code>--color</code> prefix hook and builds utilities.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@theme</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --color-ink-1: var(--ink-1);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --color-ink-2: var(--ink-2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --color-surface-1: var(--surface-1);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --color-surface-2: var(--surface-2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --color-link: var(--link);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>But</strong>, <code>--ink-1</code> and friends havn&#39;t been defined anywhere. </p>
<p>So let&#39;s do that, with our design tokens. </p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --ink-1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-9)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --ink-2</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-7)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --surface-1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-2)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --surface-2</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-1)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  --link</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--indigo-6)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@media</span><span style="color: var(--shiki-color-text)"> (prefers-color-scheme</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> dark) {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">:root</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --ink-1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-1)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --ink-2</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-5)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface-1</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-11)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --surface-2</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--gray-10)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    --link</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--indigo-4)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><strong>That&#39;s it</strong>, now I have a workflow like this, no noise about light or dark, that&#39;s configured higher up in the stack and templates don&#39;t need to deal with it.</p>
<pre><code class="language-html"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;bg-surface-2&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">header</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">cssName</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;text-ink-1&quot;</span><span style="color: var(--shiki-color-text)">&gt;â€¦&lt;/</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;text-ink-2&quot;</span><span style="color: var(--shiki-color-text)">&gt;â€¦&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">header</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>
</code></pre>
<p><img loading="lazy" src="https://pbs.twimg.com/media/GISrjchbAAAOZYH?format=jpg" alt="" title="Title " />
<img loading="lazy" src="https://pbs.twimg.com/media/GISrSfZbMAAemI9?format=jpg" alt="" title="Title " /></p>

        <h2>
          Outro
          <a name="outro" href="#outro">#</a>
        </h2>
       <p>I stashed this work in a repo called <a href="https://github.com/argyleink/twop">TWOP</a> (TailWind OpenProps). Definitely checkout the <a href="https://github.com/argyleink/twop/blob/main/app/tailwind.css">theme.css</a> file. </p>
<p>Let me know what else you discover you can configure!</p>
]]></description>
            <link>https://nerdy.dev/BYO-CSS-tokens-to-tailwind-v4s-new-CSS-centric-config?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/BYO-CSS-tokens-to-tailwind-v4s-new-CSS-centric-config?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[git]]></category>
            <dc:creator><![CDATA[atom@argyleink]]></dc:creator>
            <pubDate>Mon, 18 Mar 2024 03:51:22 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/tailwindv4-open-props-theme-config.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/tailwindv4-open-props-theme-config.png"/>
        </item>
        <item>
            <title><![CDATA[Vibe check]]></title>
            <description><![CDATA[<p>A vibe check, like <a href="https://daverupert.com/2024/03/vibe-check-31/">Dave does</a>!</p>
<ol>
<li>Hackin on a <a href="https://bsky.app/profile/nerdy.dev/post/3kkhttsup7c26">fretless mountain banjo</a>;<br><a href="https://recorder.google.com/e2138a86-b06f-4afe-aca6-a2b95cb3acc6">listen to a clip</a></li>
<li>Ridin <a href="https://twitter.com/argyleink/status/1663651252293758976">the onewheel</a> with friends</li>
<li>Wrote a couple blog posts, tryin to be short n sweet</li>
<li>New episodes of the <a href="https://badatcss.com/">Bad@CSS</a> podcast landed</li>
<li>Updated some OSS</li>
<li>Was Dad a lot</li>
<li>Beat <a href="https://store.steampowered.com/app/535480/Sundered_Eldritch_Edition/?curator_clanid=36850605">Sundered</a> and <a href="https://store.steampowered.com/app/1092790/Inscryption/?curator_clanid=34803254">Inscryption</a>, working on <a href="https://store.steampowered.com/app/600990/The_Gardens_Between/?l=english&curator_clanid=41196567">The Gardens Between Us</a> with the kids</li>
</ol>
<p><img 
            loading="lazy" 
            src="https://res.cloudinary.com/dnpmdb8r8/image/upload/f_auto,c_limit,q_auto,w_auto/w_800/argyleink/onewheel-spring-2024.jpg" 
            alt="" 
            title="Adam and friends on a trail in Seattle " 
            decoding="async"
            width="2160" 
            height="2621"
          /></p>
]]></description>
            <link>https://nerdy.dev/march-vibe-check?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/march-vibe-check?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <dc:creator><![CDATA[atom@argyleink]]></dc:creator>
            <pubDate>Sun, 17 Mar 2024 01:49:02 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Bad At CSS With Dave Rupert And Randy Standards]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/dave-bad-at-css.png" alt="Dave Rupert" height="1610" width="3024" />
        <p><span class="Tag">Ep #7</span><br><strong><a href="https://daverupert.com">Dave Rupert</a> is bad at CSS</strong><br></p>
<ul>
<li>Macho Man Randy Standards cameo</li>
<li>Styling inputs and makin knobs</li>
<li><a href="https://developer.chrome.com/docs/css-ui/css-field-sizing"><code>field-sizing</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:user-invalid"><code>:user-invalid</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility"><code>content-visibility</code></a></li>
<li><a href="https://developer.chrome.com/blog/css-relative-color-syntax">Relative color syntax</a> (RCS)</li>
</ul>
<p>â¤· <a href="https://badatcss.com">badatcss.com</a> Â· <a href="https://www.youtube.com/watch?v=azUEOy8_GHo">youtube</a> Â· <a href="https://open.spotify.com/episode/0mcunbYNddUmJLO8LgpRf1">spotify</a></p>
]]></description>
            <link>https://nerdy.dev/bad-at-css-with-dave-rupert-and-randy-standards?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/bad-at-css-with-dave-rupert-and-randy-standards?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[media]]></category>
            <dc:creator><![CDATA[adam.is.bad@css]]></dc:creator>
            <pubDate>Fri, 15 Mar 2024 16:12:38 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/dave-bad-at-css.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/dave-bad-at-css.png"/>
        </item>
        <item>
            <title><![CDATA[Steal this popover code]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/steal-this-code.png" alt="Text emphasized alt text example" height="102" width="481" />
        <p>Popovers are pretty rad, as are <a href="https://web.dev/articles/building/a-dialog-component">dialogs</a>, but animating them isn&#39;t easy.</p>
<ol>
<li>the browser toggles <code>display</code></li>
<li>the elements enter and exit the <a href="https://developer.mozilla.org/docs/Glossary/Top_layer">top layer</a> <br>(aka: the DOM penthouse)</li>
</ol>
<p><a href="https://developer.mozilla.org/docs/Web/HTML/Global_attributes/popover">Popovers</a> are basically being <a href="https://developer.mozilla.org/docs/Web/API/Node/appendChild">appended</a> or <a href="https://developer.mozilla.org/docs/Web/API/Node/removeChild">removed</a>, and <a href="https://developer.mozilla.org/docs/Web/CSS/display"><code>display</code></a> is toggled between <code>block</code> and <code>none</code>. </p>
<br>

<p><q class="info">Ew, how do we deal with that?</q></p>

        <h2>
          Steal this basic setup
          <a name="steal-this-basic-setup" href="#steal-this-basic-setup">#</a>
        </h2>
       <p>This next section is optimized for you to steal, but you can also just <a href="https://codepen.io/argyleink/pen/JjzqXee">peep the Codepen</a> and take it from there.</p>

        <h2>
          HTML
          <a name="html" href="#html">#</a>
        </h2>
       <p>Button that opens the popover:</p>
<pre><code class="language-html"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">popovertarget</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-tooltip&quot;</span><span style="color: var(--shiki-color-text)">&gt;?&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>
</code></pre>
<p>The <code>[popover]</code>:</p>
<pre><code class="language-html"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-tooltip&quot;</span><span style="color: var(--shiki-color-text)"> popover&gt;tip&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>
</code></pre>

        <h2>
          CSS
          <a name="css" href="#css">#</a>
        </h2>
       <p>This is a bit tricky. At least I think so.</p>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">[</span><span style="color: var(--shiki-token-function)">popover</span><span style="color: var(--shiki-color-text)">] {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &amp;, &amp;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-constant)">:backdrop {</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    transition: </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      display .5</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-token-constant)"> allow-discrete</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      overlay .5</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-token-constant)"> allow-discrete</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      opacity .5</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">opacity</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &amp;</span><span style="color: var(--shiki-token-function)">::backdrop</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">black</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &amp;:</span><span style="color: var(--shiki-token-string-expression)">popover-open</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">opacity</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &amp;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-constant)">:backdrop {</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      opacity: 0.5</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">@starting-style</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &amp;:</span><span style="color: var(--shiki-token-string-expression)">popover-open</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &amp;:</span><span style="color: var(--shiki-token-string-expression)">popover-open</span><span style="color: var(--shiki-token-function)">::backdrop</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">opacity</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>

        <h2>
          CSS snippet explained
          <a name="css-snippet-explained" href="#css-snippet-explained">#</a>
        </h2>
       <p>This isn&#39;t a deep dive, find <a href="https://developer.chrome.com/blog/entry-exit-animations">a good one from Una here</a>, but is a <code>2m</code> overview.</p>

        <h2>
          Transition setup
          <a name="transition-setup" href="#transition-setup">#</a>
        </h2>
       <ol>
<li>sets any popover and their backdrops to <code>0</code> opacity</li>
<li>sets up a transition for that opacity</li>
<li>with a matching duration to opacity, <code>display</code> and <a href="https://developer.mozilla.org/docs/Web/CSS/overlay"><code>overlay</code></a> use a new keyword <a href="https://developer.mozilla.org/docs/Web/CSS/transition-behavior"><code>allow-discrete</code></a> that signals these properties toggle any new values <strong>after</strong> the duration has run</li>
</ol>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">[</span><span style="color: var(--shiki-token-function)">popover</span><span style="color: var(--shiki-color-text)">] {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &amp;, &amp;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-constant)">:backdrop {</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    transition: </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      display .5</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-token-constant)"> allow-discrete</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      overlay .5</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-token-constant)"> allow-discrete</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> </span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      opacity .5</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">opacity</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><q>Display and entering/exiting the top-layer will now only change after opacity has finished fading</q></p>

        <h2>
          Popover showing
          <a name="popover-showing" href="#popover-showing">#</a>
        </h2>
       <ol>
<li>sets any popover to opacity <code>1</code> when <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:popover-open"><code>:popover-open</code></a></li>
<li>sets the backdrop to half opacity</li>
</ol>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">[</span><span style="color: var(--shiki-token-function)">popover</span><span style="color: var(--shiki-color-text)">] {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &amp;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-constant)">popover-open {</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    opacity: 1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &amp;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-constant)">:backdrop {</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      opacity: 0.5</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>

        <h2>
          Entry animation prep
          <a name="entry-animation-prep" href="#entry-animation-prep">#</a>
        </h2>
       <p>Since popovers enter the top layer, and we&#39;re using transitions, we need a way to tell the browser what styles to start the transition from. Enter <a href="https://developer.mozilla.org/docs/Web/CSS/@starting-style"><code>@starting-style</code></a></p>
<ol>
<li>When the popover is opened</li>
<li>Start the backdrop and popover with opacity 0</li>
</ol>
<pre><code class="language-css"><pre class="shiki css-variables" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">[</span><span style="color: var(--shiki-token-function)">popover</span><span style="color: var(--shiki-color-text)">] {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  @</span><span style="color: var(--shiki-token-constant)">starting-style</span><span style="color: var(--shiki-color-text)"> {</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &amp;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-constant)">popover-open</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">    &amp;:popover-open::backdrop {</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">      opacity: 0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  }</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">}</span></span></code></pre>
</code></pre>
<p><q>This will then transition from the starting style, to the popover showing styles.</q></p>

        <h2>
          JS
          <a name="js" href="#js">#</a>
        </h2>
       <p>Nothing to see here.</p>

        <h3>
          Try it
          <a name="try-it" href="#try-it">#</a>
        </h3>
       <p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/JjzqXee?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/JjzqXee">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>
]]></description>
            <link>https://nerdy.dev/steal-this-popover-starter-kit?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/steal-this-popover-starter-kit?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[html]]></category>
            <dc:creator><![CDATA[DevRel@Google]]></dc:creator>
            <pubDate>Fri, 15 Mar 2024 03:45:30 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/steal-this-code.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/steal-this-code.png"/>
        </item>
        <item>
            <title><![CDATA[Can you feel the rhythmâ€½]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/logical-rhythm.png" alt="Screenshot of the devtools grid overlay on top of the demo from this post." height="940" width="2266" />
        <p>It&#39;s much more than vertical rhythm on the web. Flex and grid logical layouts and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values">logical props</a> make the concept of baseline grids an international reality. </p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/vertical-rtl_zmftpq.mp4 
            width="1920" 
            height="1442"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/vertical-rtl_zmftpq.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>
<p>Here&#39;s the technique in a <a href="https://www.youtube.com/shorts/PyBa0u_Cs0o">YouTube Short</a>.</p>
<p>Or try it for yourself, here&#39;s the Codepen.</p>
<p>
          <iframe 
            class="codepen-embed" 
            scrolling="no" 
            title="null" 
            src="https://codepen.io/argyleink/embed/preview/RweXyRq?default-tab=result&editable=true&theme-id=43079" 
            frameborder="no" 
            loading="lazy" 
            allowtransparency="true" 
            allowfullscreen="true"
          >
            See the Pen <a href="https://codepen.io/argyleink/embed/preview/RweXyRq">
            Hot text-emphasis</a> by Adam Argyle (<a href="https://codepen.io/argyleink">@argyleink</a>)
            on <a href="https://codepen.io">CodePen</a>.
          </iframe>
        </p>

        <h2>
          Logical rhythm: ltr
          <a name="logical-rhythm:-ltr" href="#logical-rhythm:-ltr">#</a>
        </h2>
       <p>Looks like regular vertical rhythm here yeah?</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/ltr_lublfy.mp4 
            width="1920" 
            height="1442"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/ltr_lublfy.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>

        <h2>
          Logical rhythm: rtl
          <a name="logical-rhythm:-rtl" href="#logical-rhythm:-rtl">#</a>
        </h2>
       <p>Looks like regular vertical rhythm here too.</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/rtl_qbup5o.mp4 
            width="1920" 
            height="1442"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/rtl_qbup5o.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>

        <h2>
          Logical rhythm: vertical rtl
          <a name="logical-rhythm:-vertical-rtl" href="#logical-rhythm:-vertical-rtl">#</a>
        </h2>
       <p>But here! Oh yeah, <strong>that&#39;s special</strong>.</p>
<p><video 
            src=https://res.cloudinary.com/dnpmdb8r8/video/upload/f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/vertical-rtl_zmftpq.mp4 
            width="1920" 
            height="1442"
            alt=" "
            poster="https://res.cloudinary.com/dnpmdb8r8/video/upload/so_0.5,f_auto,w_auto,q_auto/f_auto,q_auto/argyleink/vertical-rtl_zmftpq.jpg"
            controls 
            loop
            muted 
            playsinline 
            allowFullScreen
          /></p>

        <h2>
          Outro
          <a name="outro" href="#outro">#</a>
        </h2>
       <p>CSS let&#39;s us authors be lazy and care less. Offering baked in, contextual, and adaptive directionalities via <code>inline</code> and <code>block</code>. Rad.</p>
]]></description>
            <link>https://nerdy.dev/css-logical-rhythm?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/css-logical-rhythm?utm_source=rss</guid>
            <category><![CDATA[blog]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[atom@argyleink]]></dc:creator>
            <pubDate>Wed, 13 Mar 2024 04:30:17 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/logical-rhythm.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/logical-rhythm.png"/>
        </item>
        <item>
            <title><![CDATA[This Site Now Supports At Protocol Mentions And Interactions]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bluesky-mentions.png" alt="A screenshot of a post from this site with Bluesky mentions linked with an icon." height="1058" width="1360" />
        <p><a href="https://bsky.app/profile/nerdy.dev">Bluesky</a> mentions are now collected and shown on notes and blog posts on this site, just like <a href="https://elk.zone/front-end.social/@argyleink">Mastodon</a>.</p>
]]></description>
            <link>https://nerdy.dev/this-site-now-supports-at-protocol-mentions-and-interactions?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/this-site-now-supports-at-protocol-mentions-and-interactions?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <dc:creator><![CDATA[Web Master@admin]]></dc:creator>
            <pubDate>Sun, 10 Mar 2024 06:44:00 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bluesky-mentions.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/bluesky-mentions.png"/>
        </item>
        <item>
            <title><![CDATA[Bad At CSS 2024 Resolutions]]></title>
            <description><![CDATA[
          <img style="display: none" src="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-in-2024.png" alt="CSS in 2024 on some grunge texture" height="498" width="1012" />
        <p><span class="Tag">Ep #6</span><br><strong>New Year, New Resolutions:</strong><br>
A look at me and <a href="https://twitter.com/_davideast">David&#39;s</a> CSS goals for 2024 </p>
<ul>
<li>Finish <a href="https://unpkg.com/open-props@beta/">Open Props v2</a></li>
<li>Build with CSS Anchor</li>
<li>New uses for Container Queries</li>
<li>Multiple backgrounds on <a href="http://gradient.style">gradient.style</a> </li>
<li>Get weirder with <a href="https://scroll-driven-animations.style">Scroll-Driven Animations</a></li>
<li>Help DevTools evolve with modern CSS</li>
</ul>
<p>â¤· <a href="https://badatcss.com">badatcss.com</a></p>
]]></description>
            <link>https://nerdy.dev/bad-at-css-2024-resolutions?utm_source=rss</link>
            <guid isPermaLink="true">https://nerdy.dev/bad-at-css-2024-resolutions?utm_source=rss</guid>
            <category><![CDATA[note]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[media]]></category>
            <dc:creator><![CDATA[adam.is.bad@css]]></dc:creator>
            <pubDate>Fri, 08 Mar 2024 18:12:59 GMT</pubDate>
            <enclosure url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-in-2024.png" length="0" type="image/png"/>
            <media:thumbnail url="https://res.cloudinary.com/dnpmdb8r8/image/upload/argyleink/css-in-2024.png"/>
        </item>
    </channel>
</rss>